[{"/home/max/Documentos/microsys/src/index.js":"1","/home/max/Documentos/microsys/src/App.js":"2","/home/max/Documentos/microsys/src/reportWebVitals.js":"3","/home/max/Documentos/microsys/src/contexts/auth.js":"4","/home/max/Documentos/microsys/src/routes/index.js":"5","/home/max/Documentos/microsys/src/services/api.js":"6","/home/max/Documentos/microsys/src/routes/Route.js":"7","/home/max/Documentos/microsys/src/pages/SignIn/index.js":"8","/home/max/Documentos/microsys/src/pages/Home/index.js":"9","/home/max/Documentos/microsys/src/pages/CollectionBactery/index.js":"10","/home/max/Documentos/microsys/src/pages/CollectionFungic/index.js":"11","/home/max/Documentos/microsys/src/pages/GerencyUsers/index.js":"12","/home/max/Documentos/microsys/src/pages/AddBactery/index.js":"13","/home/max/Documentos/microsys/src/pages/AddFungic/index.js":"14","/home/max/Documentos/microsys/src/pages/Profile/index.js":"15","/home/max/Documentos/microsys/src/components/ProgressBar/index.js":"16","/home/max/Documentos/microsys/src/components/VersionApp/index.js":"17","/home/max/Documentos/microsys/src/components/Header/index.js":"18","/home/max/Documentos/microsys/src/components/TableBactery/index.js":"19","/home/max/Documentos/microsys/src/components/TableFungic/index.js":"20","/home/max/Documentos/microsys/src/components/TableUser/index.js":"21","/home/max/Documentos/microsys/src/components/Search/index.js":"22"},{"size":500,"mtime":1645475353700,"results":"23","hashOfConfig":"24"},{"size":284,"mtime":1645475353696,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1645475353704,"results":"26","hashOfConfig":"24"},{"size":3174,"mtime":1645475353700,"results":"27","hashOfConfig":"24"},{"size":1186,"mtime":1645475353704,"results":"28","hashOfConfig":"24"},{"size":1058,"mtime":1645480927246,"results":"29","hashOfConfig":"24"},{"size":744,"mtime":1645475353704,"results":"30","hashOfConfig":"24"},{"size":1835,"mtime":1645475353704,"results":"31","hashOfConfig":"24"},{"size":1291,"mtime":1645475353704,"results":"32","hashOfConfig":"24"},{"size":1958,"mtime":1645475353704,"results":"33","hashOfConfig":"24"},{"size":1929,"mtime":1645475353704,"results":"34","hashOfConfig":"24"},{"size":6306,"mtime":1645475353704,"results":"35","hashOfConfig":"24"},{"size":34096,"mtime":1645475353700,"results":"36","hashOfConfig":"24"},{"size":36849,"mtime":1645475353704,"results":"37","hashOfConfig":"24"},{"size":8827,"mtime":1645475353704,"results":"38","hashOfConfig":"24"},{"size":844,"mtime":1645475353700,"results":"39","hashOfConfig":"24"},{"size":402,"mtime":1645475353700,"results":"40","hashOfConfig":"24"},{"size":1516,"mtime":1645481198850,"results":"41","hashOfConfig":"24"},{"size":7762,"mtime":1645475353700,"results":"42","hashOfConfig":"24"},{"size":7995,"mtime":1645475353700,"results":"43","hashOfConfig":"24"},{"size":5455,"mtime":1645475353700,"results":"44","hashOfConfig":"24"},{"size":1667,"mtime":1645475353700,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ofrn5m",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/max/Documentos/microsys/src/index.js",[],["103","104"],"/home/max/Documentos/microsys/src/App.js",[],"/home/max/Documentos/microsys/src/reportWebVitals.js",[],"/home/max/Documentos/microsys/src/contexts/auth.js",["105"],"import React, { useState, createContext, useEffect } from 'react';\nimport api from '../services/api';\n\nexport const AuthContext = createContext({});\n\nfunction AuthProvider({children}){\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [dataListUsers, setDataListUsers] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [token, setToken] = useState('')\n    const [master, setMaster] = useState(false);\n\n    async function auth(email, password){\n\n        setLoading(true);\n        try {\n            const credentials = {\n              email: email,\n              password: password,\n            }\n      \n            const application = {\n              applicationId: \"82d2ddd0-593c-11ec-aac1-d1c56c82bf33\" || \"82d10910-593c-11ec-aac1-d1c56c82bf33\"\n            }\n      \n            delete api.defaults.headers.common.Authorization;\n      \n            const response = await api.post('/token/guest', application)\n              .catch((err => {\n                console.log(err.response);\n              }))\n      \n            const tokenGuest = 'Bearer ' + response.data.accessToken;\n      \n            api.defaults.headers.common.Authorization = tokenGuest;\n      \n            const responseUser = await api.post('/token/login', credentials);\n      \n            const tokenLogin = responseUser.data.accessToken;\n            setToken(tokenLogin);\n            await localStorage.setItem('token', tokenLogin);\n            api.defaults.headers.common.Authorization = 'Bearer ' + tokenLogin;\n           const user = responseUser.data;\n           storage(user);\n           setUser(user);\n           setLoading(false);\n            if(user && user.master === true) {\n              setMaster(true);\n            }else if(user && user.master === false){\n              setMaster(true);\n            }else {\n              setLoading(false);\n              setErrorMessage('Usuário não permitido');\n            }\n          } catch (err) {\n            console.log(\"OUTRO ERRO: \" + err);\n            setLoading(false);\n          }\n    }\n\n    function storage(data){\n        localStorage.setItem('@user', JSON.stringify(data));\n    }\n\n      //Logout do usuario\n    async function signOut(){\n      setUser(null);\n      setMaster(false);\n      localStorage.removeItem('@user');\n      setUser(null);\n    }\n\n    useEffect(()=>{\n\n      async function loadStorage(){\n        const storageUser = await localStorage.getItem('@user');\n        const token = await localStorage.getItem('token');\n\n        if(storageUser && token){\n          const storage = JSON.parse(storageUser);\n          const tokenUser = token;\n          setToken(tokenUser);\n          setUser(storage);\n          setLoading(false);\n          setMaster(storage.master);\n\n        }\n        \n        setLoading(false);\n        return\n      }\n      \n      loadStorage();\n  \n    }, [])\n\n\n    return(\n        <AuthContext.Provider value={{ signed: !!user, user, \n        loading, setLoading, auth, master, signOut, dataListUsers, setDataListUsers, token }}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider;","/home/max/Documentos/microsys/src/routes/index.js",[],"/home/max/Documentos/microsys/src/services/api.js",[],"/home/max/Documentos/microsys/src/routes/Route.js",[],"/home/max/Documentos/microsys/src/pages/SignIn/index.js",["106","107"],"import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport './signin.css';\nimport logo from '../../assets/logo.png';\nimport { AuthContext } from '../../contexts/auth';\nimport { LinearProgress } from '@mui/material';\nimport VersionApp from '../../components/VersionApp';\n\nexport default function SignIn() {\n\n  const { auth, loading, setLoading } = useContext(AuthContext);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState(null);\n\n\n  async function signIn(){\n\n    if (email.length === 0 && password.length === 0)\n      return alert('Preencha os campos!')\n    if (email.length === 0)\n      return alert('Digite seu e-mail!')\n    if (password.length === 0)\n      return alert('Digite sua senha!')\n    \n    setLoading(true);\n    await auth(email, password);\n    setLoading(false);\n    setErrorMessage('Usuário/senha incorretos');\n\n  }\n\n    return (\n      <div className=\"container\">\n        <div className=\"signin\">\n          <div className=\"area-login\">\n            <h1>MICROSYS</h1>\n            <img src={logo} alt=\"Sistema Logo\" />\n          </div>\n          <div className=\"form\">\n            <input type=\"text\" id='inputSignIn' placeholder=\"usuário\" value={email} onChange={e=> setEmail(e.target.value)}/>\n            <input type=\"password\" id='inputSignIn' placeholder=\"*********\" value={password} onChange={e=> setPassword(e.target.value)}/>\n            <button onClick={signIn} className=\"btn-acess\" type=\"submit\" >\n            {loading ? \n              <LinearProgress />\n             :\n              'Entrar'\n            }\n            </button>\n          </div>\n          {/* <Link to=\"/register\">Esqueceu sua senha ?</Link> */}\n        </div>\n        <VersionApp />\n      </div>\n    );\n  }\n  ","/home/max/Documentos/microsys/src/pages/Home/index.js",["108","109","110"],"import React, { useState, useContext } from 'react';\nimport './home.css';\nimport { Link } from 'react-router-dom';\nimport Header from '../../components/Header';\nimport { AuthContext } from '../../contexts/auth';\nimport VersionApp from '../../components/VersionApp';\n\n\nexport default function Home({isPrivate}) {\n\n  const { user, master } = useContext(AuthContext);\n\n  const [title, setTitle] = useState('GERÊNCIAMENTO MICROORGANISMOS');\n  const [backVisible, setBackVisible] = useState(false);\n\n  if(isPrivate){\n    return(\n      <div>\n        <h1>Página privada, faça login</h1>\n      </div>\n    )\n  }else {\n    return (\n\n      <div className=\"container\">\n        <Header title={title} backVisible={backVisible}/>\n        <div className=\"groupButtons\">\n          <Link to='/colecao-bacteriana' >\n            <button >\n              COLEÇÃO BACTERIANA\n            </button>\n          </Link>\n          <Link to='/colecao-fungica' >\n            <button >\n              COLEÇÃO FÚNGICA\n            </button>\n          </Link>\n          {master === true &&\n          <Link to='/gerenciamento-de-usuarios' >\n            <button >\n              GERÊNCIA DE USUÁRIOS\n            </button>\n            </Link>\n          }\n        </div>\n        <VersionApp />\n      </div>\n    )\n  }\n\n}\n \n","/home/max/Documentos/microsys/src/pages/CollectionBactery/index.js",["111","112","113","114","115"],"import React, { useState, useEffect, useContext } from 'react';\nimport './collectionBactery.css';\nimport { Link } from 'react-router-dom';\nimport Header from '../../components/Header';\nimport TableBactery from '../../components/TableBactery';\nimport Button from '@mui/material/Button';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport api from '../../services/api';\nimport { AuthContext } from '../../contexts/auth';\nimport VersionApp from '../../components/VersionApp';\n\n\nexport default function CollectionBactery() {\n  const { token } = useContext(AuthContext);\n  const [title, setTitle] = useState('COLÔNIAS BACTERIANAS');\n  const [visible, setVisible] = useState(true);\n  const [offSearch, setOffSearch] = useState(true);\n  const [dataBactery, setDataBactery] = React.useState([]);\n\n  async function getBactery(){\n\n    try{\n      const response = await api.get('/bacterias',{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n  \n      const result = response.data;\n      setDataBactery(result.reverse());\n    }\n    catch(error){\n      alert('Erro na listagem de coleções bacterianas, verifique sua conexão com a internet.')\n      console.log(error);\n    }\n  }\n\n  useEffect(()=> {\n    getBactery();\n  }, [])\n\n  return (\n    <div className=\"containerAll\">\n      <Header title={title} visible={visible} offSearch={offSearch} setDataBactery={setDataBactery}/>\n      {!dataBactery &&\n          <span>Não existem coleções bacterianas cadastradas no momento.</span> \n      }\n      <div className='containerTableBactery'>\n        <TableBactery dataBactery={dataBactery} getBactery={getBactery}/>\n      </div>\n      <div className='areaButton'>\n        <Link to='/adicao-bacteriana'>\n          <Button id=\"btnAdd\" variant=\"contained\"> \n            <AddCircleIcon />\n          </Button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n ","/home/max/Documentos/microsys/src/pages/CollectionFungic/index.js",["116","117","118","119","120"],"import React, { useState, useEffect, useContext } from 'react';\nimport './collectionFungic.css';\nimport { Link } from 'react-router-dom';\nimport Header from '../../components/Header';\nimport TableFungic from '../../components/TableFungic';\nimport Button from '@mui/material/Button';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport api from '../../services/api';\nimport { AuthContext } from '../../contexts/auth';\nimport VersionApp from '../../components/VersionApp';\n\n\nexport default function CollectionFungic() {\n  const { token } = useContext(AuthContext);\n  const [title, setTitle] = useState('COLÔNIAS FÚNGICAS');\n  const [visible, setVisible] = useState(true);\n  const [offSearch, setOffSearch] = useState(true);\n  const [dataFungic, setDataFungic] = React.useState([]);\n\n\n  async function getFungic(){\n\n    try{\n      const response = await api.get('/fungos',{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n  \n      const result = response.data;\n      setDataFungic(result.reverse());\n    }\n    catch(error){\n      alert('Erro na listagem de coleções fúngicas, verifique sua conexão com a internet.')\n      console.log(error);\n    }\n  }\n\n  useEffect(()=> {\n    getFungic();\n  }, [])\n\n\n  return (\n    <div className=\"containerFungic\">\n      <Header title={title} visible={visible} offSearch={offSearch} setDataFungic={setDataFungic} />\n      {!dataFungic &&\n          <span>Não existem coleções fúngicas cadastradas no momento.</span> \n      }\n      <div className='containerTable'>\n        <TableFungic dataFungic={dataFungic} getFungic={getFungic}/>\n      </div>\n      <div className='areaButton'>\n        <Link to='/adicao-fungica'>\n          <Button id=\"btnAdd\" variant=\"contained\"> \n            <AddCircleIcon />\n          </Button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n \n","/home/max/Documentos/microsys/src/pages/GerencyUsers/index.js",["121","122","123","124","125"],"import React, { useState, useEffect, useContext } from 'react'\nimport './gerencyUsers.css';\nimport Header from '../../components/Header';\nimport Button from '@mui/material/Button';\nimport api from '../../services/api';\nimport ProgressBar from '../../components/ProgressBar';\nimport { AuthContext } from '../../contexts/auth';\nimport TableUser from '../../components/TableUser';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport VersionApp from '../../components/VersionApp';\n\n\n\nexport default function GerencyUsers() {\n  const { setDataListUsers, token } = useContext(AuthContext);\n  const [title, setTitle] = useState('GERÊNCIAMENTO DE USUÁRIOS');\n  const [visible, setVisible] = useState(true);\n  const [data, setData] = useState([]);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [userId, setUserId] = useState('');\n  const [master, setMaster] = useState(false);\n  const [buttonMobileVisible, setButtonMobileVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [active, setActive] = React.useState(false);\n  const [offSearch, setOffSearch] = useState(false);\n\n  const objInputs = {\n    name: setName,\n    email: setEmail,\n    master: setMaster,\n    active: setActive,\n    id: setUserId\n  }\n\n  async function addUser(){\n    \n    if(!name || !email){\n      alert('Preencha os campos corretamente!');\n      return\n    }\n      \n    setLoading(true);\n\n    try{\n      api.defaults.headers.common.Authorization = 'Bearer ' + token;\n      await api.post('/users', {\n        name: name,\n        email: email,\n        master: master,\n      });\n\n      setLoading(false);\n      listUsers();\n      setName('');\n      setEmail('');\n      setMaster(false);\n      setActive(false);\n      alert('Usuário cadastrado com sucesso!');\n    }\n    catch(error){\n      alert('Erro ao adicionar usuário, verifique sua conexão com a internet.')\n      console.log(error);\n    }\n  }\n\n  async function editUser(){\n\n    try{\n      const body ={\n        name: name,\n        email: email,\n        master: master\n      }\n      await api.patch(`/users/${userId}`, body,{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n  \n        setLoading(false);\n        listUsers();\n        setName('');\n        setEmail('');\n        setMaster(false);\n        setActive(false);\n        setButtonMobileVisible(false);\n        alert('Usuário atualizado com sucesso!');\n        listUsers();\n    }\n    catch(error){\n      alert('Erro de requizição ao tentar atualizar usuário, verifique sua internet!')\n      console.log(error);\n    }\n\n  }\n\n  async function removeUser(item){\n\n    try{\n      await api.delete(`/users/${item.id}`, {\n        data: {foo: 'bar'},\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n  \n      setName('');\n      setEmail('');\n      setMaster(false);\n      setActive(false);\n      setButtonMobileVisible(false);\n      alert('Usuário removido com sucesso!');\n      listUsers();\n    }\n    catch(error){\n      alert('Erro ao tentar excluir usuário, verifique sua conexão com a internet!');\n      console.log(error);\n    }\n  }\n\n  function selectMaster(){\n    !master ? setMaster(true) : setMaster(false);\n  }\n\n  function selectActive(){\n    !active ? setActive(true) : setActive(false);\n  }\n\n  function backEdit(){\n    setButtonMobileVisible(false);\n    setName('');\n    setEmail('');\n    setMaster(false);\n    setActive(false);\n    setUserId('');\n  }\n\n  async function listUsers(){\n    setLoading(true);\n    \n    try{\n      const response = await api.get('/users', {\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      })\n  \n      let res = [];\n      res = response.data;\n      \n      const newArrayFilter = res.filter(function(user) {\n        return user.type !== 'internal'\n      });\n  \n      const reverseList = newArrayFilter.reverse();\n      setDataListUsers(reverseList);\n      setData(reverseList);\n      setLoading(false);  \n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n\n  useEffect(()=> {\n    listUsers();\n  }, [])\n\n  return (\n    <div className=\"containerUser\">\n      <Header title={title} visible={visible} offSearch={offSearch}/>\n      <div className='areaFormularyAll' style={{ justifyContent: buttonMobileVisible ?  'center' : 'space-around'}}>\n        {buttonMobileVisible &&\n            <div onClick={backEdit}>\n            <ArrowBackIosIcon id='arrow'/>\n          </div>\n        }\n        <div className='areaFormularyAdd'>\n          <div className='smallAreaUsers'>\n            <span>Nome:</span>\n            <input type=\"text\" name=\"name\" id=\"input\" value={name} onChange={e=> setName(e.target.value)}/>\n          </div>\n          <div className='smallAreaUsers'>\n            <span>E-mail:</span>\n            <input type=\"text\" name=\"email\" id=\"input\" value={email} onChange={e=> setEmail(e.target.value)}/>\n          </div>\n          <div className='smallAreaCheckBox'>\n            <span>Administrador:</span>\n            <input type=\"checkbox\" value={master} checked={master} name=\"adm\" onClick={selectMaster}/>\n          </div>\n          <div className='smallAreaCheckBox'>\n            <span>Ativar</span>\n            <input type=\"checkbox\" value={active} checked={active} name=\"active\" onClick={selectActive}/>\n          </div>\n          {loading ?\n            <ProgressBar />\n          :\n            <>\n              {!buttonMobileVisible ?\n                <Button onClick={addUser} id=\"btnRegisterUse\" variant=\"contained\"> \n                  Cadastrar\n                </Button>\n              :\n                <Button onClick={editUser} id=\"btnRegisterUse\" variant=\"contained\"> \n                  Atualizar\n                </Button>\n              }\n            </>\n          }\n        </div>\n        {!buttonMobileVisible &&\n          <div className='areaFomularyLis'>\n            <TableUser objInputs={objInputs} removeUser={removeUser}  setButtonMobileVisible={setButtonMobileVisible} />\n          </div>\n        }\n      </div>\n      <VersionApp />\n    </div>\n  )\n}\n ","/home/max/Documentos/microsys/src/pages/AddBactery/index.js",["126","127","128","129","130","131","132","133","134","135"],"import React, { useEffect, useState, useContext } from 'react';\nimport './addBactery.css';\nimport { useHistory } from 'react-router-dom';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport Header from '../../components/Header';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport api from '../../services/api';\nimport { AuthContext } from '../../contexts/auth';\nimport { FiUpload } from 'react-icons/fi';\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\nimport VersionApp from '../../components/VersionApp';\n\n\n\nexport default function AddBactery(props){\n    let history = useHistory();\n    const { token } = useContext(AuthContext);\n    const [title, setTitle] = useState('CADASTRAR COLÔNIA BACTERIANA');\n    const [visible, setVisible] = useState(false);\n    const [offSearch, setOffSearch] = useState(false);\n    const [dataMorphological, setDataMorphological] = useState([]);\n    const [dataHost, setDataHost] = useState([]);\n    const [filePhoto, setFilePhoto] = useState();\n    const [filePhotoVerso, setFilePhotoVerso] = useState();\n    const [filePhotoMicro, setFilePhotoMicro] = useState();\n    const [imageUrl, setImageUrl] = useState(null);\n    const [imageVersoUrl, setImageVersoUrl] = useState(null);\n    const [imageMicroUrl, setImageMicroUrl] = useState(null);\n    const [description, setDescription] = useState('');\n    const [collectionPlace, setCollectionPlace] = useState('');\n    const [border, setBorder] = useState('');\n    const [surface, setSurface] = useState('');\n    const [properties, setProperties] = useState('');\n    const [molecularIdentification, setMolecularIdentification] = useState('');\n    const [typeGrowth, setTypeGrowth] = useState('');\n    const [color, setColor] = useState('');\n    const [consistence, setConsistence] = useState('');\n    const [detOpticos, setDetOpticos] = useState('');\n    const [form, setForm] = useState('');\n    const [elevation, setElevation] = useState('');\n    const [dateCollect, setDateCollect] = useState('');\n    const [dateReactvation, setDateReactvation] = useState('');\n    const [spore, setSpore] = useState();\n    const [morphological, setMorphological] = useState('');\n    const [host, setHost] = useState('');\n    const [isolationMedium, setIsolationMedium] = useState('');\n    const [startIncubation, setStartIncubation] = useState(Number);\n    const [code, setCode] = useState('');\n    const [pigment, setPigment] = useState('');\n    const [addMorph, setAddMoph] = useState('');\n    const [addNewHost, setAddNewHost] = useState('');\n    const [openAddMorph, setOpenAddMorph] = useState(false);\n    const [openHost, setOpenHost] = useState(false);\n    const [idMorph, setIdMorph] = useState();\n    const [idHost, setIdHost] = useState();\n    const [idBactery, setIdBactery] = useState('');\n    const [passValidation, setPassValidation] = useState(false);\n\n    function addMorphological(){\n        setOpenAddMorph(true);\n    }\n\n    function addHost(){\n        setOpenHost(true);\n    }\n\n    async function addMorphRequest(){\n        if(addMorph === ''){\n            alert('Preencha o campo de identificação Morfológica');\n            return\n        }\n\n        try{\n            await api.post('/morfologias',{\n                descricao: addMorph\n            })\n            \n            alert('Cadastro realizado com sucesso!');\n            setOpenAddMorph(false);\n            getMorphological();\n            setAddMoph('');\n        }\n        catch(error){\n            console.log(error);\n            alert('Essa identificação morfológica já exite!');\n        }       \n\n    }\n\n    async function addHostRequest(){\n        if(addNewHost === ''){\n            alert('Preencha o campo de origem do hospedeiro');\n            return\n        }\n\n        try{\n            await api.post('/hospedeiros',{\n                descricao: addNewHost\n            })\n            \n            alert('Cadastro realizado com sucesso!');\n            setOpenHost(false);\n            getHost();\n            setAddNewHost('');\n        }\n        catch(error){\n            console.log(error);\n            alert('Essa identificação morfológica já exite!');\n        } \n    }\n\n    function validationFormBactery(body){\n        const arrayBody = Object.entries(body);\n        const propEmpty = arrayBody.filter(e => {\n            return e[1] === '';\n        })\n\n        if(propEmpty.length > 0){\n            const arrayPropEmpty = propEmpty.map(item => {\n                return item[0];\n            })\n\n            const formatedString = arrayPropEmpty.join(', ').toString();\n            console.log(formatedString)\n            alert(`Preencha os seguintes campos ${formatedString}`);\n            setPassValidation(true);\n        }\n        \n    }\n\n    async function addBactery(){\n        setPassValidation(false);\n        \n        if(imageUrl === undefined || imageVersoUrl === undefined || imageMicroUrl === undefined){\n            return alert('Adicione todas as imagens para continuar o registro deste fungo.');\n        }\n\n        if(morphological === '' || host === ''){\n            return alert('Escolha uma identificação Morfológica e uma Origem para o hospedeiro.');\n        }\n\n        const body = {\n            codigo: code,\n            identMolecular: molecularIdentification,\n            cor: color,\n            pigmento: pigment,\n            consistencia: consistence,\n            detOpticos: detOpticos,\n            forma: form,\n            borda: border,\n            superficie: surface, \n            elevacao: elevation,\n            esporula: spore,\n            tipoCresc: typeGrowth,\n            propriedades: properties,\n            meioIsolamento: isolationMedium,\n            tempIncubacao: startIncubation,\n            descricaoIsolado: description,\n            dataColeta: dateCollect,\n            dataReativacao: dateReactvation,\n            localColeta: collectionPlace,\n            morfologiaId: idMorph[0].id,\n            hospedeiroId: idHost[0].id\n        }\n\n        if(!passValidation){\n            validationFormBactery(body);\n        }else {\n            return\n        }\n        \n        try{\n\n            api.defaults.headers.common.Authorization = 'Bearer ' + token;\n            let response = await api.post('/bacterias', body);\n\n            const result = response.data;\n            const id = result.id;\n            setDescription('');\n            setCollectionPlace('');\n            setBorder('');\n            setSurface('');\n            setProperties('');\n            setMolecularIdentification('');\n            setTypeGrowth('');\n            setColor('');\n            setForm('');\n            setElevation('');\n            setDateCollect('');\n            setConsistence('');\n            setDetOpticos('');\n            setDateReactvation('');\n            setSpore(false);\n            setMorphological('');\n            setHost('');\n            setIsolationMedium('')\n            setStartIncubation(0);\n            setCode('');\n            setPigment('');\n\n            uploadImages(id);\n            getMorphological();\n            alert('Cadastro realizado com sucesso!');\n            history.push('/colecao-bacteriana');\n        }\n        catch(error){\n            console.log(error);\n            return\n        }\n    }\n\n    function handleFileImage(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhoto(image);\n                setImageUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhoto(null);\n                return null;\n            }\n        }\n    }\n\n    function handleFileImageVerso(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhotoVerso(image);\n                setImageVersoUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhotoVerso(null);\n                return null;\n            }\n        }\n    }\n\n    function handleFileImageMicro(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhotoMicro(image);\n                setImageMicroUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhotoMicro(null);\n                return null;\n            }\n        }\n    }\n    //continuar criando upload api\n    async function handleUpload(idBactery){\n        const currentUid = idBactery; \n\n        const body = new FormData();\n        body.append('urlImagem', filePhoto);\n        body.append('urlImagemVerso', filePhotoVerso);\n        body.append('urlImagemMicro', filePhotoMicro);\n    \n        try{\n            api.defaults.headers.Authorization = `Bearer ${token}`;\n            await api.patch(`/bacterias/${currentUid}/images`, body);\n        }\n        catch (error){\n            console.log(error);\n        }\n    }\n\n    async function uploadImages(idBactery){\n        if((filePhoto && filePhotoVerso && filePhotoMicro) !== null){\n            handleUpload(idBactery);\n        }\n        return\n    }\n\n    async function editBactery(){\n        let body = {\n            codigo: code || props.location.codigo,\n            identMolecular: molecularIdentification || props.location.identMolecular,\n            cor: color || props.location.cor,\n            consistence: consistence || props.location.consistence,\n            detOpticos: detOpticos || props.location.detOpticos,\n            pigmento: pigment || props.location.pigmento,\n            forma: form || props.location.forma,\n            borda: border || props.location.borda,\n            superficie: surface || props.location.superficie, \n            elevacao: elevation || props.location.elevacao,\n            esporula: spore || props.location.esporula,\n            tipoCresc: typeGrowth || props.location.tipoCresc,\n            propriedades: properties || props.location.propriedades,\n            meioIsolamento: isolationMedium || props.location.meioIsolamento,\n            tempIncubacao: startIncubation || props.location.tempIncubacao,\n            descricaoIsolado: description || props.location.descricaoIsolado,\n            dataColeta: dateCollect || props.location.dataColeta,\n            dataReativacao: dateReactvation || props.location.dataReativacao,\n            localColeta: collectionPlace || props.location.localColeta,\n            morfologiaId: props.location.morfologiaId,\n            hospedeiroId: props.location.hospedeiroId\n        }\n\n        try{\n            api.defaults.headers.common.Authorization = 'Bearer ' + token;\n            await api.patch(`/bacterias/${props.location.itemId}`, body);\n            \n            setFilePhoto('');\n            setDescription('');\n            setCollectionPlace('');\n            setBorder('');\n            setSurface('');\n            setProperties('');\n            setMolecularIdentification('');\n            setTypeGrowth('');\n            setColor('');\n            setConsistence('');\n            setDetOpticos('');\n            setForm('');\n            setElevation('');\n            setDateCollect('');\n            setDateReactvation('');\n            setSpore(false);\n            setMorphological('');\n            setHost('');\n            setIsolationMedium('')\n            setStartIncubation(0);\n            setCode('');\n            setPigment('');\n\n            handleUpload(props.location.itemId);\n            getMorphological();\n            alert('Registro atualizado com sucesso!');\n            history.push('/colecao-bacteriana');\n        }\n        catch(error){\n            console.log(error);\n            alert('preencha todos os campos');\n            return\n        }\n    }\n    \n    async function getMorphological(){\n        try{\n            let response = await api.get('/morfologias',{\n                headers:{\n                  'Content-type': 'application/json',\n                  'Authorization': `Bearer ${token}`,\n                  'Accept': '*/*'\n                }\n              })\n            const result = response.data;\n            setDataMorphological(result.reverse());\n        }\n        catch(error){\n            console.log('erro na listagem:', error);\n        }\n    }\n\n    async function getHost(){\n        try{\n            let response = await api.get('/hospedeiros',{\n                headers:{\n                  'Content-type': 'application/json',\n                  'Authorization': `Bearer ${token}`,\n                  'Accept': '*/*'\n                }\n              })\n            const result = response.data;\n            setDataHost(result.reverse());\n        }\n        catch(error){\n            console.log('erro na listagem:', error);\n        }\n    }\n\n    useEffect(()=> {\n        function interationIdMorph(){\n            setIdMorph(dataMorphological.filter(i => {\n                return i.descricao === morphological;\n            }));\n        }\n        interationIdMorph();\n    }, [morphological]);\n\n    useEffect(()=> {\n        function interationIdHost(){\n            setIdHost(dataHost.filter(i => {\n                return i.descricao === host;\n            }));\n        }\n        interationIdHost();\n    }, [host]);\n\n    useEffect(()=> {\n        getMorphological();\n    }, []);\n\n    useEffect(()=> {\n        getHost();\n    }, []);\n\n    useEffect(()=> {\n\n        // async function getImages(){\n            console.log(props.location.urlImagem);\n        //     if(props.location.urlImagem === undefined){\n        //         return;\n        //     }\n        //     try{\n        //         let image;\n        //         let response = await api.get(`/files/image?urlImage=${props.location.urlImagem}`, {\n        //             headers:{\n        //                 'Content-type': 'application/json',\n        //                 'Authorization': `Bearer ${token}`,\n        //                 'Accept': '*/*'\n        //             }\n        //         });\n        //         const result = response.data;\n        //         image = Buffer.from(result, 'binary').toString('base64');\n        //         const formatImage = image ? ('data:image/;base64, ' + image) : undefined;\n                \n        //         console.log(imageUrl);\n        //     }\n        //     catch(error){\n        //         alert('Ocorreu um erro na exibição de imagens');\n        //         console.log(error);\n        //     }\n        // }\n        // setImageUrl(encodeURI(props.location.urlImagem));\n        // getImages();\n    }, [])\n\n    return (\n        <div className='containerAddBacteryAll'>\n            <Header title={title} visible={visible} offSearch={offSearch}/>\n            <div onClick={()=> history.push(\"/colecao-bacteriana\")} className='areaBackBactery'>\n                <ArrowBackIosIcon className='backBactery'/>\n            </div>\n            <div className='areaFormAll'>\n                <div className='areaFormBactery1'>\n                <div className='smallAreaBacteryImage'>\n                    <span>Adicionar fotos:</span>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImage}  /><br/>\n                        { imageUrl === null ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\"/>\n                            :\n                            <img src={imageUrl} width=\"70\" alt=\"Perspectiva\" />\n                        }\n                    </label>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImageVerso}  /><br/>\n                        { imageVersoUrl === null ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\"/>\n                            :\n                            <img src={imageVersoUrl} width=\"70\" alt=\"Verso\" />\n                        }\n                    </label>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImageMicro}  /><br/>\n                        { imageMicroUrl === null ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\"/>\n                            :\n                            <img src={imageMicroUrl} width=\"70\" alt=\"Microorganismo\" />\n                        }\n                    </label>\n                </div>\n                    <div className='smallAreaBactery'>\n                        <span>Código:</span>\n                        <input type=\"text\" placeholder='Digite um código' name=\"code\" id=\"input\" value={code || props.location.codigo} onChange={e=> setCode(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Descrição do isolado:</span>\n                        <select value={description || props.location.descricaoIsolado} name=\"description\" id=\"input\" onChange={e=> setDescription(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='ambiente'>ambiente</option>\n                            <option value='plantas'>plantas</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Local de coleta:</span>\n                            <input type=\"text\" placeholder='Digite Cidade e Bairro' name=\"collectionPlace\" id=\"input\" value={collectionPlace || props.location.localColeta} onChange={e=> setCollectionPlace(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Borda:</span>\n                        <select value={border || props.location.borda} name=\"border\" id=\"input\" onChange={e=> setBorder(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='inteira'>inteira</option>\n                            <option value='ondulada'>ondulada</option>\n                            <option value='lobada'>lobada</option>\n                            <option value='denteada'>denteada</option>\n                            <option value='filamentos'>filamentos</option>\n                        </select>\n                    </div>\n                </div>\n                <div className='areaFormBactery2'>\n                    <div className='smallAreaBactery'>\n                        <span>Tipo de crescimento:</span>\n                        <select value={typeGrowth || props.location.tipoCresc} name=\"typeGrowth\" id=\"input\" onChange={e=> setTypeGrowth(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='limitado'>limitado</option>\n                            <option value='invasivo'>invasivo</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Cor:</span>\n                        <select value={color || props.location.cor} name=\"color\" id=\"input\" onChange={e=> setColor(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='verde'>verde</option>\n                            <option value='branco'>branco</option>\n                            <option value='branco/amarelo'>branco/amarelo</option>\n                            <option value='branco/marrom'>branco/marrom</option>\n                            <option value='branco/cinza'>branco/cinza</option>\n                            <option value='branco/rosa'>branco/rosa</option>\n                            <option value='amarelo'>amarelo</option>\n                            <option value='laranja'>laranja</option>\n                            <option value='rosa'>rosa</option>\n                            <option value='lilas/roxo'>lilas/roxo</option>\n                            <option value='bege'>bege</option>\n                            <option value='marrom'>marrom</option>\n                            <option value='preto'>preto</option>\n                            <option value='cinza'>cinza</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Consistência:</span>\n                        <select value={consistence || props.location.consistence} name=\"color\" id=\"input\" onChange={e=> setConsistence(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='seca'>seca</option>\n                            <option value='aquosa'>aquosa</option>\n                            <option value='cremosa'>cremosa</option>\n                            <option value='elastica'>elástica</option>\n                            <option value='manteiga'>manteiga</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Detalhes Ópticos:</span>\n                        <select value={detOpticos || props.location.detOpticos} name=\"color\" id=\"input\" onChange={e=> setDetOpticos(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='transparente'>transparente</option>\n                            <option value='translucido'>translucido</option>\n                            <option value='opaco'>opaco</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Forma:</span>\n                        <select value={form || props.location.forma} name=\"form\" id=\"input\" onChange={e=> setForm(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='circular'>circular</option>\n                            <option value='irregular'>irregular</option>\n                            <option value='puntiforme'>puntiforme</option>\n                            <option value='filamentoso'>filamentoso</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Elevação:</span>\n                        <select value={elevation || props.location.elevacao} name=\"elevation\" id=\"input\" onChange={e=> setElevation(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='plana'>plana</option>\n                            <option value='venticular'>venticular</option>\n                            <option value='convexa'>convexa</option>\n                            <option value='pulvinada'>pulvinada</option>\n                            <option value='umbonada'>umbonada</option>\n                            <option value='umbilicada'>umbilicada</option>\n                        </select>\n                    </div>\n                    <div className='smallDateArea'>\n                        <span>Data de Coleta:</span>\n                        <input type=\"date\" name=\"dateCollect\" id=\"input\" value={dateCollect || props.location.dataColeta} onChange={e=> setDateCollect(e.target.value)}/>\n                        <span>Data de Reativação:</span>\n                        <input type=\"date\" name=\"dateReactvation\" id=\"input\" value={dateReactvation || props.location.dataReativacao} onChange={e=> setDateReactvation(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Esporula:</span>\n                        <select value={spore || props.location.esporula} name=\"spore\" id=\"input\" onChange={e=> setSpore(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value={true}>sim</option>\n                            <option value={false}>não</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Superfície:</span>\n                        <select value={surface || props.location.superficie} name=\"surface\" id=\"input\" onChange={e=> setSurface(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='lisa'>lisa</option>\n                            <option value='rugosa'>rugosa</option>\n                            <option value='cerebriforme'>cerebriforme</option>\n                            <option value='coriacea'>coriacea</option>\n                            <option value='algodonosa'>algodonosa</option>\n                            <option value='cotonosa'>cotonosa</option>\n                            <option value='mucoide'>mucoide</option>\n                            <option value='cremosa'>cremosa</option>\n                            <option value='concentrica'>concentrica</option>\n                            <option value='opaca'>opaca</option>\n                            <option value='aveludada'>aveludada</option>\n                            <option value='brilhante'>brilhante</option>\n                            <option value='pulverulenta'>pulverulenta</option>\n                            <option value='sulcos'>sulcos</option>\n                            <option value='protuberância'>protuberância</option>\n                        </select>\n                    </div>\n                </div>\n                <div className='areaFormBactery3'>\n                    <div className='smallAreaAdd'>\n                        <span>Identificação Morfológica:</span>\n                        <div className='optionsMorphological'>\n                            <select value={morphological || props.location.morfologia} name=\"morphological\" id=\"input\" onChange={e=> setMorphological(e.target.value)}>\n                                <option value=\"\">Selecionar</option>\n                                {dataMorphological.map(i => (\n                                    <option value={i.descricao}>{i.descricao}</option>\n                                ))\n                                }\n                            </select>\n                            <AddCircleIcon onClick={addMorphological} id='iconAdd' color='primary' />\n                            {openAddMorph &&\n                                <div className='addMorph'>\n                                    <span>Cadastre uma identificação Morfológica</span>\n                                    <input value={addMorph} type='text' id='addMorph' onChange={e=> setAddMoph(e.target.value)} />\n                                    <div className='buttonsAddMorph'>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={addMorphRequest} size='small' variant=\"contained\">CADASTRAR</Button>\n                                        </Stack>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={()=> setOpenAddMorph(false)} size='small' variant=\"contained\">CANCELAR</Button>\n                                        </Stack>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <div className='smallAreaAdd'>\n                        <span>Origem do Hospedeiro:</span>\n                        <div className='optionsMorphological'>\n                            <select value={host || props.location.hospedeiro} name=\"host\" id=\"input\" onChange={e=> setHost(e.target.value)}>\n                                <option value=\"\">Selecione</option>\n                                {dataHost.map(i => (\n                                    <option value={i.descricao}>{i.descricao}</option>\n                                ))\n                                }\n                            </select>\n                            <AddCircleIcon onClick={addHost} id='iconAdd' color='primary' />\n                            {openHost &&\n                                <div className='addMorph'>\n                                    <span>Cadastre uma origem do Hospedeiro</span>\n                                    <input value={addNewHost} type='text' id='addMorph' onChange={e=> setAddNewHost(e.target.value)} />\n                                    <div className='buttonsAddMorph'>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={addHostRequest} size='small' variant=\"contained\">CADASTRAR</Button>\n                                        </Stack>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={()=> setOpenHost(false)} size='small' variant=\"contained\">CANCELAR</Button>\n                                        </Stack>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Propriedades:</span>\n                        <select value={properties || props.location.propriedades} name=\"properties\" id=\"input\" onChange={e=> setProperties(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='gramais'>gramais</option>\n                            <option value='gramenos'>gramenos</option>\n                            <option value='amilases'>amilases</option>\n                            <option value='lipases'>lipases</option>\n                            <option value='proteases'>proteases</option>\n                            <option value='biosurfactantes'>biosurfactantes</option>\n                            <option value='biorremediacao'>biorremediação</option>\n                            <option value='controle'>controle</option>\n                            <option value='inoculantes'>inoculantes</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Identificação Molecular:</span>\n                        <input type=\"text\" placeholder='Digite uma identificação' name=\"molecularIdentification\" id=\"input\" value={molecularIdentification || props.location.identMolecular} onChange={e=> setMolecularIdentification(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Meio de Isolamento:</span>\n                        <select value={isolationMedium || props.location.meioIsolamento} name=\"isolationMedium\" id=\"input\" onChange={e=> setIsolationMedium(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='bda'>bda</option>\n                            <option value='tsb'>tsb</option>\n                            <option value='sabouraud'>sabouraud</option>\n                        </select>\n                    </div>\n                    <div className='smallNumberArea'>\n                        <span>Dias de Incubação:</span>\n                        <div className='areaDays'>\n                            <input type=\"number\" placeholder='Tempo' min={1} name=\"startIncubation\" id=\"inputDays\" value={startIncubation || props.location.tempIncubacao} onChange={e=> setStartIncubation(e.target.value)}/>\n                            <span>Dias</span>\n                        </div>\n                    </div>\n                    <div className='smallAreaBactery'>\n                        <span>Pigmento:</span>\n                        <select value={pigment || props.location.pigmento} name=\"pigment\" id=\"input\" onChange={e=> setPigment(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='amarelo'>amarelo</option>\n                            <option value='vermelho'>vermelho</option>\n                            <option value='laranja'>laranja</option>\n                            <option value='lilas'>lilas</option>\n                            <option value='verde'>verde</option>\n                            <option value='azul'>azul</option>\n                        </select>\n                    </div>\n                    <div style={{marginTop: 30}}>\n                        {props.location.buttonUpdate ?\n                            <Stack spacing={2} direction=\"row\">\n                                <Button onClick={editBactery} size='large' variant=\"contained\">ATUALIZAR</Button>\n                            </Stack>\n                            :\n                            <Stack spacing={2} direction=\"row\">\n                                <Button onClick={addBactery} size='large' variant=\"contained\">CADASTRAR</Button>\n                            </Stack>\n                        }\n                    </div>\n                </div>\n            </div>\n            <VersionApp />\n        </div>\n    )\n}","/home/max/Documentos/microsys/src/pages/AddFungic/index.js",["136","137","138","139","140","141","142","143"],"import React, { useEffect, useState, useContext } from 'react';\nimport './addFungic.css';\nimport { useHistory } from 'react-router-dom';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport Header from '../../components/Header';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport api from '../../services/api';\nimport { AuthContext } from '../../contexts/auth';\nimport { FiUpload } from 'react-icons/fi';\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\nimport VersionApp from '../../components/VersionApp';\n\n\n\nexport default function AddFungic(props){\n    let history = useHistory();\n    const { token } = useContext(AuthContext);\n    const [title, setTitle] = useState('CADASTRAR COLÔNIA FÚNGICA');\n    const [visible, setVisible] = useState(false);\n    const [offSearch, setOffSearch] = useState(false);\n    const [dataMorphological, setDataMorphological] = useState([]);\n    const [dataHost, setDataHost] = useState([]);\n    const [filePhoto, setFilePhoto] = useState();\n    const [filePhotoVerso, setFilePhotoVerso] = useState();\n    const [filePhotoMicro, setFilePhotoMicro] = useState();\n    const [imageUrl, setImageUrl] = useState(null);\n    const [imageVersoUrl, setImageVersoUrl] = useState(null);\n    const [imageMicroUrl, setImageMicroUrl] = useState(null);\n    const [urlImage, setUrlImage] = useState('');\n    const [urlVerso, setUrlVerso] = useState('');\n    const [urlMicro, setUrlMicro] = useState('');\n    const [description, setDescription] = useState('');\n    const [collectionPlace, setCollectionPlace] = useState('');\n    const [border, setBorder] = useState('');\n    const [surface, setSurface] = useState('');\n    const [texture, setTexture] = useState('');\n    const [properties, setProperties] = useState('');\n    const [molecularIdentification, setMolecularIdentification] = useState('');\n    const [typeGrowth, setTypeGrowth] = useState('');\n    const [color, setColor] = useState('');\n    const [backColor, setBackColor] = useState('');\n    const [form, setForm] = useState('');\n    const [elevation, setElevation] = useState('');\n    const [dateCollect, setDateCollect] = useState('');\n    const [dateReactvation, setDateReactvation] = useState('');\n    const [spore, setSpore] = useState();\n    const [morphological, setMorphological] = useState('');\n    const [host, setHost] = useState('');\n    const [isolationMedium, setIsolationMedium] = useState('');\n    const [startIncubation, setStartIncubation] = useState(Number);\n    const [code, setCode] = useState('');\n    const [pigment, setPigment] = useState('');\n    const [addMorph, setAddMoph] = useState('');\n    const [addNewHost, setAddNewHost] = useState('');\n    const [openAddMorph, setOpenAddMorph] = useState(false);\n    const [openHost, setOpenHost] = useState(false);\n    const [idMorph, setIdMorph] = useState();\n    const [idHost, setIdHost] = useState();\n    const [passValidation, setPassValidation] = useState(false);\n\n    function addMorphological(){\n        setOpenAddMorph(true);\n    }\n\n    function addHost(){\n        setOpenHost(true);\n    }\n\n    async function addMorphRequest(){\n        if(addMorph === ''){\n            alert('Preencha o campo de identificação Morfológica');\n            return\n        }\n\n        try{\n            await api.post('/morfologias',{\n                descricao: addMorph\n            })\n            \n            alert('Cadastro realizado com sucesso!');\n            setOpenAddMorph(false);\n            getMorphological();\n            setAddMoph('');\n        }\n        catch(error){\n            console.log(error);\n            alert('Essa identificação morfológica já exite!');\n        }       \n\n    }\n\n    async function addHostRequest(){\n        if(addNewHost === ''){\n            alert('Preencha o campo de origem do hospedeiro');\n            return\n        }\n\n        try{\n            await api.post('/hospedeiros',{\n                descricao: addNewHost\n            })\n            \n            alert('Cadastro realizado com sucesso!');\n            setOpenHost(false);\n            getHost();\n            setAddNewHost('');\n        }\n        catch(error){\n            console.log(error);\n            alert('Essa identificação morfológica já exite!');\n        } \n    }\n\n    function validationFormFungic(body){\n        const arrayBody = Object.entries(body);\n        const propEmpty = arrayBody.filter(e => {\n            return e[1] === '';\n        })\n\n        if(propEmpty.length > 0){\n            const arrayPropEmpty = propEmpty.map(item => {\n                return item[0];\n            })\n\n            const formatedString = arrayPropEmpty.join(', ').toString();\n            alert(`Preencha os seguintes campos ${formatedString}`);\n            setPassValidation(true);\n        }\n        \n    }\n\n    async function addFungic(){\n        setPassValidation(false);\n        \n        if(imageUrl === undefined || imageVersoUrl === undefined || imageMicroUrl === undefined){\n            return alert('Adicione todas as imagens para continuar o registro deste fungo.');\n        }\n\n        if(morphological === '' || host === ''){\n            return alert('Escolha uma identificação Morfológica e uma Origem para o hospedeiro.');\n        }\n\n        const body = {\n            codigo: code,\n            identMolecular: molecularIdentification,\n            cor: color,\n            corVerso: backColor,\n            pigmento: pigment,\n            textura: texture,\n            forma: form,\n            borda: border,\n            superficie: surface, \n            elevacao: elevation,\n            esporula: spore,\n            tipoCresc: typeGrowth,\n            propriedades: properties,\n            meioIsolamento: isolationMedium,\n            tempIncubacao: startIncubation,\n            descricaoIsolado: description,\n            dataColeta: dateCollect,\n            dataReativacao: dateReactvation,\n            localColeta: collectionPlace,\n            morfologiaId: idMorph[0].id,\n            hospedeiroId: idHost[0].id\n        }\n\n        if(!passValidation){\n            validationFormFungic(body);\n        }else {\n            return\n        }\n        \n        try{\n            api.defaults.headers.common.Authorization = 'Bearer ' + token;\n            let response = await api.post('/fungos', body);\n\n            const result = response.data;\n            const id = result.id;\n            setDescription('');\n            setCollectionPlace('');\n            setBorder('');\n            setSurface('');\n            setTexture('');\n            setProperties('');\n            setMolecularIdentification('');\n            setTypeGrowth('');\n            setColor('');\n            setBackColor('');\n            setForm('');\n            setElevation('');\n            setDateCollect('');\n            setDateReactvation('');\n            setSpore(false);\n            setMorphological('');\n            setHost('');\n            setIsolationMedium('')\n            setStartIncubation(0);\n            setCode('');\n            setPigment('');\n\n            uploadImages(id);\n            getMorphological();\n            alert('Cadastro realizado com sucesso!');\n            history.push('/colecao-fungica');\n        }\n        catch(error){\n            console.log(error);\n            return\n        }\n    }\n\n    function handleFileImage(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhoto(image);\n                setImageUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhoto(null);\n                return null;\n            }\n        }\n    }\n\n    function handleFileImageVerso(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhotoVerso(image);\n                setImageVersoUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhotoVerso(null);\n                return null;\n            }\n        }\n    }\n\n    function handleFileImageMicro(e){\n        if(e.target.files[0]){\n            const image = e.target.files[0];\n\n            if(image.type === 'image/jpeg' || image.type === 'image/png'){\n                setFilePhotoMicro(image);\n                setImageMicroUrl(URL.createObjectURL(e.target.files[0]));\n            }else {\n                alert('Envie uma imagem do tipo PNG ou JPEG');\n                setFilePhotoMicro(null);\n                return null;\n            }\n        }\n    }\n\n    //continuar criando upload api\n    async function handleUpload(idFungic){\n        const currentUid = idFungic; \n        \n        const body = new FormData();\n        body.append('urlImagem', filePhoto || urlImage);\n        body.append('urlImagemVerso', filePhotoVerso || urlVerso);\n        body.append('urlImagemMicro', filePhotoMicro || urlMicro);\n    \n        try{\n            api.defaults.headers.Authorization = `Bearer ${token}`;\n            await api.patch(`/fungos/${currentUid}/images`, body);\n        }\n        catch (error){\n            console.log(error);\n        }\n    }\n\n    async function uploadImages(idFungic){\n        if((filePhoto && filePhotoVerso && filePhotoMicro) !== null){\n            handleUpload(idFungic);\n        }\n        return\n    }\n\n    async function editFungic(){\n        let body = {\n            codigo: code || props.location.codigo,\n            identMolecular: molecularIdentification || props.location.identMolecular,\n            cor: color || props.location.cor,\n            corVerso: backColor || props.location.corVerso,\n            pigmento: pigment || props.location.pigmento,\n            textura: texture || props.location.textura,\n            forma: form || props.location.forma,\n            borda: border || props.location.borda,\n            superficie: surface || props.location.superficie, \n            elevacao: elevation || props.location.elevacao,\n            esporula: spore || props.location.esporula,\n            tipoCresc: typeGrowth || props.location.tipoCresc,\n            propriedades: properties || props.location.propriedades,\n            meioIsolamento: isolationMedium || props.location.meioIsolamento,\n            tempIncubacao: startIncubation || props.location.tempIncubacao,\n            descricaoIsolado: description || props.location.descricaoIsolado,\n            dataColeta: dateCollect || props.location.dataColeta,\n            dataReativacao: dateReactvation || props.location.dataReativacao,\n            localColeta: collectionPlace || props.location.localColeta,\n            morfologiaId: props.location.morfologiaId,\n            hospedeiroId: props.location.hospedeiroId\n        }\n\n        try{\n            api.defaults.headers.common.Authorization = 'Bearer ' + token;\n            await api.patch(`/fungos/${props.location.itemId}`, body);\n            \n            setFilePhoto('');\n            setDescription('');\n            setCollectionPlace('');\n            setBorder('');\n            setSurface('');\n            setTexture('');\n            setProperties('');\n            setMolecularIdentification('');\n            setTypeGrowth('');\n            setColor('');\n            setBackColor('');\n            setForm('');\n            setElevation('');\n            setDateCollect('');\n            setDateReactvation('');\n            setSpore(false);\n            setMorphological('');\n            setHost('');\n            setIsolationMedium('')\n            setStartIncubation(0);\n            setCode('');\n            setPigment('');\n\n            handleUpload(props.location.itemId);\n            getMorphological();\n            alert('Registro atualizado com sucesso!');\n            history.push('/colecao-fungica');\n        }\n        catch(error){\n            console.log(error);\n            alert('preencha todos os campos');\n            return\n        }\n    }\n    \n    async function getMorphological(){\n        try{\n            let response = await api.get('/morfologias',{\n                headers:{\n                  'Content-type': 'application/json',\n                  'Authorization': `Bearer ${token}`,\n                  'Accept': '*/*'\n                }\n              })\n            const result = response.data;\n            setDataMorphological(result.reverse());\n        }\n        catch(error){\n            console.log('erro na listagem:', error);\n        }\n    }\n\n    async function getHost(){\n        try{\n            let response = await api.get('/hospedeiros',{\n                headers:{\n                  'Content-type': 'application/json',\n                  'Authorization': `Bearer ${token}`,\n                  'Accept': '*/*'\n                }\n              })\n            const result = response.data;\n            setDataHost(result.reverse());\n        }\n        catch(error){\n            console.log('erro na listagem:', error);\n        }\n    }\n\n    useEffect(()=> {\n        function interationIdMorph(){\n            setIdMorph(dataMorphological.filter(i => {\n                return i.descricao === morphological;\n            }));\n        }\n        interationIdMorph();\n    }, [morphological]);\n\n    useEffect(()=> {\n        function interationIdHost(){\n            setIdHost(dataHost.filter(i => {\n                return i.descricao === host;\n            }));\n        }\n        interationIdHost();\n    }, [host]);\n\n    useEffect(()=> {\n        getMorphological();\n    }, []);\n\n    useEffect(()=> {\n        getHost();\n    }, []);\n\n    async function getImages(){\n        if(props.location.urlImagem === undefined){\n            return;\n        }else {\n            try{\n                let image;\n                let response = await api.get(`/files/image?urlImage=${props.location.urlImagem}`, \n                { \n                    responseType: 'arraybuffer',\n                    headers:{\n                        'Content-type': 'application/json',\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': '*/*'\n                    }  \n                });\n                const result = response.data;\n                image = Buffer.from(result, 'binary').toString('base64');\n                const formatImage = image ? ('data:image/;base64, ' + image) : undefined;\n                let formatUrl = encodeURI(formatImage);\n                setUrlImage(formatUrl);\n                \n            }\n            catch(error){\n                alert('Ocorreu um erro na exibição de imagens');\n                console.log(error);\n            }\n        }\n        \n        if(props.location.urlImagemVerso === undefined){\n            return;\n        }else {\n            try{\n                let image;\n                let response = await api.get(`/files/image?urlImage=${props.location.urlImagemVerso}`, \n                { \n                    responseType: 'arraybuffer',\n                    headers:{\n                        'Content-type': 'application/json',\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': '*/*'\n                    }\n                });\n                const result = response.data;\n                image = Buffer.from(result, 'binary').toString('base64');\n                const formatImage = image ? ('data:image/;base64, ' + image) : undefined;\n                let formatUrl = encodeURI(formatImage);\n                setUrlVerso(formatUrl);\n                \n            }\n            catch(error){\n                alert('Ocorreu um erro na exibição de imagens');\n                console.log(error);\n            }\n        }\n\n        if(props.location.urlImagemMicro === undefined){\n            return;\n        }else {\n            try{\n                let image;\n                let response = await api.get(`/files/image?urlImage=${props.location.urlImagemMicro}`, \n                { \n                    responseType: 'arraybuffer',\n                    headers:{\n                        'Content-type': 'application/json',\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': '*/*'\n                    }\n                });\n                const result = response.data;\n                image = Buffer.from(result, 'binary').toString('base64');\n                const formatImage = image ? ('data:image/;base64, ' + image) : undefined;\n                let formatUrl = encodeURI(formatImage);\n                setUrlMicro(formatUrl);\n                \n            }\n            catch(error){\n                alert('Ocorreu um erro na exibição de imagens');\n                console.log(error);\n            }\n        }     \n    }\n\n    useEffect(()=> {\n        getImages();\n    }, [])\n\n    return (\n        <div className='containerAddFungicAll'>\n            <Header title={title} visible={visible} offSearch={offSearch} dataFungic={props.location}/>\n            <div onClick={()=> history.push(\"/colecao-fungica\")} className='areaBackFungic'>\n                <ArrowBackIosIcon className='backFungic'/>\n            </div>\n            <div className='areaFormAll'>\n                <div className='areaFormFungic1'>\n                <div className='smallAreaFungicImage'>\n                    <span>Adicionar fotos:</span>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImage}  /><br/>\n                        { imageUrl === null && urlImage === '' ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\" />\n                            :\n                            <img src={imageUrl || urlImage} width=\"70\" alt=\"Perspectiva\" />\n                        }\n                    </label>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImageVerso}  /><br/>\n                        { imageVersoUrl === null && urlVerso === '' ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\" />\n                            :\n                            <img src={imageVersoUrl || urlVerso} width=\"70\" alt=\"Verso\" />\n                        }\n                    </label>\n                    <label className=\"label-avatar\">\n                        <span>\n                            <FiUpload color=\"#FFF\" size={25} />\n                        </span>\n\n                        <input type=\"file\" accept=\"image/*\" onChange={handleFileImageMicro}  /><br/>\n                        { imageMicroUrl === null && urlMicro === '' ? \n                            <AddPhotoAlternateIcon width=\"50\" height=\"50\" />\n                            :\n                            <img src={imageMicroUrl || urlMicro} width=\"70\" alt=\"Microorganismo\" />\n                        }\n                    </label>\n                </div>\n                    <div className='smallAreaFungic'>\n                        <span>Código:</span>\n                        <input type=\"text\" placeholder='Digite um código' name=\"code\" id=\"input\" value={code || props.location.codigo} onChange={e=> setCode(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Descrição do isolado:</span>\n                        <select value={description || props.location.descricaoIsolado} name=\"description\" id=\"input\" onChange={e=> setDescription(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='ambiente'>ambiente</option>\n                            <option value='plantas'>plantas</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Local de coleta:</span>\n                            <input type=\"text\" placeholder='Digite Cidade e Bairro' name=\"collectionPlace\" id=\"input\" value={collectionPlace || props.location.localColeta} onChange={e=> setCollectionPlace(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Borda:</span>\n                        <select value={border || props.location.borda} name=\"border\" id=\"input\" onChange={e=> setBorder(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='inteira'>inteira</option>\n                            <option value='ondulada'>ondulada</option>\n                            <option value='lobada'>lobada</option>\n                            <option value='denteada'>denteada</option>\n                            <option value='filamentos'>filamentos</option>\n                        </select>\n                    </div>\n                </div>\n                <div className='areaFormFungic2'>\n                    <div className='smallAreaFungic'>\n                        <span>Tipo de crescimento:</span>\n                        <select value={typeGrowth || props.location.tipoCresc} name=\"typeGrowth\" id=\"input\" onChange={e=> setTypeGrowth(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='limitado'>limitado</option>\n                            <option value='invasivo'>invasivo</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Cor:</span>\n                        <select value={color || props.location.cor} name=\"color\" id=\"input\" onChange={e=> setColor(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='verde'>verde</option>\n                            <option value='branco'>branco</option>\n                            <option value='branco/amarelo'>branco/amarelo</option>\n                            <option value='branco/marrom'>branco/marrom</option>\n                            <option value='branco/cinza'>branco/cinza</option>\n                            <option value='branco/rosa'>branco/rosa</option>\n                            <option value='amarelo'>amarelo</option>\n                            <option value='laranja'>laranja</option>\n                            <option value='rosa'>rosa</option>\n                            <option value='lilas/roxo'>lilas/roxo</option>\n                            <option value='bege'>bege</option>\n                            <option value='marrom'>marrom</option>\n                            <option value='preto'>preto</option>\n                            <option value='cinza'>cinza</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Cor Verso:</span>\n                        <select value={backColor || props.location.corVerso} name=\"backColor\" id=\"input\" onChange={e=> setBackColor(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='verde'>verde</option>\n                            <option value='branco'>branco</option>\n                            <option value='branco/amarelo'>branco/amarelo</option>\n                            <option value='branco/marrom'>branco/marrom</option>\n                            <option value='branco/cinza'>branco/cinza</option>\n                            <option value='branco/rosa'>branco/rosa</option>\n                            <option value='amarelo'>amarelo</option>\n                            <option value='laranja'>laranja</option>\n                            <option value='rosa'>rosa</option>\n                            <option value='lilas/roxo'>lilas/roxo</option>\n                            <option value='bege'>bege</option>\n                            <option value='marrom'>marrom</option>\n                            <option value='preto'>preto</option>\n                            <option value='cinza'>cinza</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Forma:</span>\n                        <select value={form || props.location.forma} name=\"form\" id=\"input\" onChange={e=> setForm(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='circular'>circular</option>\n                            <option value='irregular'>irregular</option>\n                            <option value='puntiforme'>puntiforme</option>\n                            <option value='filamentoso'>filamentoso</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Elevação:</span>\n                        <select value={elevation || props.location.elevacao} name=\"elevation\" id=\"input\" onChange={e=> setElevation(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='plana'>plana</option>\n                            <option value='venticular'>venticular</option>\n                            <option value='convexa'>convexa</option>\n                            <option value='pulvinada'>pulvinada</option>\n                            <option value='umbonada'>umbonada</option>\n                            <option value='umbilicada'>umbilicada</option>\n                        </select>\n                    </div>\n                    <div className='smallDateArea'>\n                        <span>Data de Coleta:</span>\n                        <input type=\"date\" name=\"dateCollect\" id=\"input\" value={dateCollect || props.location.dataColeta} onChange={e=> setDateCollect(e.target.value)}/>\n                        <span>Data de Reativação:</span>\n                        <input type=\"date\" name=\"dateReactvation\" id=\"input\" value={dateReactvation || props.location.dataReativacao} onChange={e=> setDateReactvation(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Esporula:</span>\n                        <select value={spore || props.location.esporula} name=\"spore\" id=\"input\" onChange={e=> setSpore(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value={true}>sim</option>\n                            <option value={false}>não</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Textura:</span>\n                        <select value={texture || props.location.textura} name=\"texture\" id=\"input\" onChange={e=> setTexture(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='leveduriforme'>leveduriforme</option>\n                            <option value='rasteiro'>rasteiro</option>\n                            <option value='fofo'>fofo</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Superfície:</span>\n                        <select value={surface || props.location.superficie} name=\"surface\" id=\"input\" onChange={e=> setSurface(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='lisa'>lisa</option>\n                            <option value='rugosa'>rugosa</option>\n                            <option value='cerebriforme'>cerebriforme</option>\n                            <option value='coriacea'>coriacea</option>\n                            <option value='algodonosa'>algodonosa</option>\n                            <option value='cotonosa'>cotonosa</option>\n                            <option value='mucoide'>mucoide</option>\n                            <option value='cremosa'>cremosa</option>\n                            <option value='concentrica'>concentrica</option>\n                            <option value='opaca'>opaca</option>\n                            <option value='aveludada'>aveludada</option>\n                            <option value='brilhante'>brilhante</option>\n                            <option value='pulverulenta'>pulverulenta</option>\n                            <option value='sulcos'>sulcos</option>\n                            <option value='protuberância'>protuberância</option>\n                        </select>\n                    </div>\n                </div>\n                <div className='areaFormFungic3'>\n                    <div className='smallAreaAdd'>\n                        <span>Identificação Morfológica:</span>\n                        <div className='optionsMorphological'>\n                            <select value={morphological || props.location.morfologia} name=\"morphological\" id=\"input\" onChange={e=> setMorphological(e.target.value)}>\n                                <option value=\"\">Selecionar</option>\n                                {dataMorphological.map(i => (\n                                    <option value={i.descricao}>{i.descricao}</option>\n                                ))\n                                }\n                            </select>\n                            <AddCircleIcon onClick={addMorphological} id='iconAdd' color='primary' />\n                            {openAddMorph &&\n                                <div className='addMorph'>\n                                    <span>Cadastre uma identificação Morfológica</span>\n                                    <input value={addMorph} type='text' id='addMorph' onChange={e=> setAddMoph(e.target.value)} />\n                                    <div className='buttonsAddMorph'>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={addMorphRequest} size='small' variant=\"contained\">CADASTRAR</Button>\n                                        </Stack>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={()=> setOpenAddMorph(false)} size='small' variant=\"contained\">CANCELAR</Button>\n                                        </Stack>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <div className='smallAreaAdd'>\n                        <span>Origem do Hospedeiro:</span>\n                        <div className='optionsMorphological'>\n                            <select value={host || props.location.hospedeiro} name=\"host\" id=\"input\" onChange={e=> setHost(e.target.value)}>\n                                <option value=\"\">Selecione</option>\n                                {dataHost.map(i => (\n                                    <option value={i.descricao}>{i.descricao}</option>\n                                ))\n                                }\n                            </select>\n                            <AddCircleIcon onClick={addHost} id='iconAdd' color='primary' />\n                            {openHost &&\n                                <div className='addMorph'>\n                                    <span>Cadastre uma origem do Hospedeiro</span>\n                                    <input value={addNewHost} type='text' id='addMorph' onChange={e=> setAddNewHost(e.target.value)} />\n                                    <div className='buttonsAddMorph'>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={addHostRequest} size='small' variant=\"contained\">CADASTRAR</Button>\n                                        </Stack>\n                                        <Stack spacing={5} direction=\"row\">\n                                            <Button onClick={()=> setOpenHost(false)} size='small' variant=\"contained\">CANCELAR</Button>\n                                        </Stack>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Propriedades:</span>\n                        <select value={properties || props.location.propriedades} name=\"properties\" id=\"input\" onChange={e=> setProperties(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='gramais'>gramais</option>\n                            <option value='gramenos'>gramenos</option>\n                            <option value='amilases'>amilases</option>\n                            <option value='lipases'>lipases</option>\n                            <option value='proteases'>proteases</option>\n                            <option value='biosurfactantes'>biosurfactantes</option>\n                            <option value='biorremediacao'>biorremediação</option>\n                            <option value='controle'>controle</option>\n                            <option value='inoculantes'>inoculantes</option>\n                        </select>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Identificação Molecular:</span>\n                        <input type=\"text\" placeholder='Digite uma identificação' name=\"molecularIdentification\" id=\"input\" value={molecularIdentification || props.location.identMolecular} onChange={e=> setMolecularIdentification(e.target.value)}/>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Meio de Isolamento:</span>\n                        <select value={isolationMedium || props.location.meioIsolamento} name=\"isolationMedium\" id=\"input\" onChange={e=> setIsolationMedium(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='bda'>bda</option>\n                            <option value='tsb'>tsb</option>\n                            <option value='sabouraud'>sabouraud</option>\n                        </select>\n                    </div>\n                    <div className='smallNumberArea'>\n                        <span>Dias de Incubação:</span>\n                        <div className='areaDays'>\n                            <input type=\"number\" placeholder='Tempo' min={1} name=\"startIncubation\" id=\"inputDays\" value={startIncubation || props.location.tempIncubacao} onChange={e=> setStartIncubation(e.target.value)}/>\n                            <span>Dias</span>\n                        </div>\n                    </div>\n                    <div className='smallAreaFungic'>\n                        <span>Pigmento:</span>\n                        <select value={pigment || props.location.pigmento} name=\"pigment\" id=\"input\" onChange={e=> setPigment(e.target.value)}>\n                            <option value=\"\">Selecione</option>\n                            <option value='amarelo'>amarelo</option>\n                            <option value='vermelho'>vermelho</option>\n                            <option value='laranja'>laranja</option>\n                            <option value='lilas'>lilas</option>\n                            <option value='verde'>verde</option>\n                            <option value='azul'>azul</option>\n                        </select>\n                    </div>\n                    <div style={{marginTop: 30}}>\n                        {props.location.buttonUpdate ?\n                            <Stack spacing={2} direction=\"row\">\n                                <Button onClick={editFungic} size='large' variant=\"contained\">ATUALIZAR</Button>\n                            </Stack>\n                            :\n                            <Stack spacing={2} direction=\"row\">\n                                <Button onClick={addFungic} size='large' variant=\"contained\">CADASTRAR</Button>\n                            </Stack>\n                        }\n                    </div>\n                </div>\n            </div>\n            <VersionApp />\n        </div>\n    )\n}","/home/max/Documentos/microsys/src/pages/Profile/index.js",["144"],"import React, { useState, useEffect, useContext } from 'react';\nimport api from '../../services/api';\nimport { useHistory } from 'react-router-dom';\nimport './profile.css';\nimport AssignmentIndIcon from '@mui/icons-material/AssignmentInd';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PersonIcon from '@mui/icons-material/Person';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport KeyIcon from '@mui/icons-material/Key';\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\nimport { AuthContext } from '../../contexts/auth';\nimport VersionApp from '../../components/VersionApp';\n\nexport default function Profile(){\n    let history = useHistory();\n    const { token } = useContext(AuthContext);\n    const [userData, setUserData] = useState('');\n    const [editName, setEditName] = useState('');\n    const [editMail, setEditMail] = useState('');\n    const [editNameInput, setEditNameInput] = useState(false);\n    const [editMailInput, setEditMailInput] = useState(false);\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [typeInput, setTypeInput] = useState('password');\n    const [typeInputNewPassword, setTypeInputNewPassword] = useState('password');\n    const [typeInputConfirmPassword, setTypeInputConfirmPassword] = useState('password');\n    const [areaPassword, setAreaPassword] = useState(false);\n\n\n    function backHome(){\n        history.push('/home/');\n      }\n\n    function transformNameInput(){\n        setEditNameInput(true);    \n    }\n\n    function transformEmailInput(){\n        setEditMailInput(true);    \n    }\n\n    function editNameCancel(){\n        setEditNameInput(false);    \n    }\n\n    function editMailCancel(){\n        setEditMailInput(false);    \n    }\n\n    async function handleEdit(){\n        try{\n            const body ={\n              name: editName,\n              email: editMail\n            }\n\n            api.defaults.headers.common.Authorization = 'Bearer ' + token;\n            await api.patch(`/me`, body);\n\n            if(editNameInput === true){\n                setEditNameInput(false);\n            }else {\n                setEditMailInput(false);\n            }\n\n            getInfoProfile();\n          }\n          catch(error){\n            alert('Erro ao tentar atualizar perfil, o email ultilizado já existe!')\n            console.log(error);\n\n          }\n    }\n\n    function transformPasswordInput(){\n        setAreaPassword(true);\n    }\n\n    function transformCancelAreaPassword(){\n        setAreaPassword(false);\n    }\n\n    async function handleNewPassword(){\n        if(password === '' || newPassword === ''){\n            alert('Preencha todos os campos para trocar de senha.');\n            return\n        }else if(confirmPassword !== newPassword){\n            alert('Por favor insira a nova senha e a confirmação de senha iguais!');\n            return\n        }\n\n        try{\n            const body ={\n                password: password,\n                newPassword: newPassword\n              }\n  \n              api.defaults.headers.common.Authorization = 'Bearer ' + token;\n              await api.patch(`/me/newPassword`, body);\n              alert('Senha atualizada com sucesso!!!');\n              setAreaPassword(false);\n              setPassword('');\n              setNewPassword('');\n        }\n        catch(error){\n            alert('Erro ao tentar trocar senha, insira a sua senha corretamente!');\n            console.log(`Erro ao requisitar atroca de senha \"/me/newPassword\" ${error}`);\n        }\n    }\n\n    async function getInfoProfile(){\n        try{\n            const response = await api.get('/me', {\n                headers:{\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                'Accept': '*/*'\n                }\n            });\n            const data = response.data;\n            setUserData(data);\n            setEditName(data.name);\n            setEditMail(data.email);\n        }\n        catch(error){\n            alert('Erro ao requisitar informações de perfil, verifique sua internet!')\n            console.log(`Erro ao requisitar informações de perfil do servidor \"/me\" ${error}`);\n        }\n    }\n\n    useEffect(()=> {\n        getInfoProfile();\n    }, [])\n\n    return(\n        <div className='containerProfile'>\n            <div onClick={backHome}>\n                <ArrowBackIosIcon id='arrow'/>\n            </div>\n            {!areaPassword ?\n                <fieldset className='viewInfo'>\n                <legend>Meu Perfil</legend>\n                    \n                    {editNameInput ?\n                        <div className='areaInfo'>\n                            <AssignmentIndIcon id='iconProfile'/>\n                            <input value={editName} id='inputProfile' onChange={e=> setEditName(e.target.value)} type='text' alt='Mudar nome' />\n                            <button onClick={handleEdit} id='buttonProfile'>Confirmar</button>\n                            <button onClick={editNameCancel} id='buttonProfile'>Cancelar</button>\n                        </div>\n                    :\n                        <div className='areaInfo'>\n                            <AssignmentIndIcon id='iconProfile'/>\n                            <label>{userData.name}</label>\n                            <button onClick={transformNameInput} id='buttonProfile'>Editar</button>\n                        </div>\n                    }\n                    {editMailInput ?\n                        <div className='areaInfo'>\n                            <EmailIcon id='iconProfile'/>\n                            <input value={editMail} id='inputProfile' onChange={e=> setEditMail(e.target.value)} type='text' alt='Mudar e-mail' />\n                            <button onClick={handleEdit} id='buttonProfile'>Confirmar</button>\n                            <button onClick={editMailCancel} id='buttonProfile'>Cancelar</button>\n                        </div>\n                    :\n                        <div className='areaInfo'>\n                            <EmailIcon id='iconProfile'/>\n                            <label>{userData.email}</label>\n                            <button onClick={transformEmailInput} id='buttonProfile'>Editar</button>\n                        </div>\n                    }\n                    <div className='areaInfo'>\n                        <PersonIcon id='iconProfile'/>\n                        <label>Usuário(a): {userData.type}</label>\n                    </div>\n                    <div className='areaInfo'>\n                        <KeyIcon id='iconProfile'/>\n                        <label><button onClick={transformPasswordInput} id='buttonAreaPassword'>Trocar de senha</button></label>\n                    </div>\n                </fieldset>\n            :\n                <fieldset className='viewInfo'>\n                <legend>Troca de senha</legend>\n                    <div className='areaInfo'>\n                        <label>Senha:</label>\n                        <input value={password} id='inputProfilePassword' onChange={e=> setPassword(e.target.value)} type={typeInput} alt='senha' />\n                        <RemoveRedEyeIcon id='iconProfile' onClick={()=> typeInput === 'password' ? setTypeInput('text') : setTypeInput('password')}/>\n                    </div>\n                    <div className='areaInfo'>\n                        <label>Nova senha:</label>\n                        <input value={newPassword} id='inputProfilePassword' onChange={e=> setNewPassword(e.target.value)} type={typeInputNewPassword} alt='nova senha' />\n                        <RemoveRedEyeIcon id='iconProfile' onClick={()=> typeInputNewPassword === 'password' ? setTypeInputNewPassword('text') : setTypeInputNewPassword('password')}/>\n                    </div>\n                    <div className='areaInfo'>\n                        <label>Confirmar nova senha:</label>\n                        <input value={confirmPassword} id='inputProfilePassword' onChange={e=> setConfirmPassword(e.target.value)} type={typeInputConfirmPassword} alt='confirmar senha' />\n                        <RemoveRedEyeIcon id='iconProfile' onClick={()=> typeInputConfirmPassword === 'password' ? setTypeInputConfirmPassword('text') : setTypeInputConfirmPassword('password')}/>\n                    </div>\n                    <div className='areaInfo'>\n                        <label><button onClick={handleNewPassword} id='buttonPassword'>Trocar de senha</button></label>\n                        <label><button onClick={transformCancelAreaPassword} id='buttonPassword'>Cancelar</button></label>\n                    </div>\n                </fieldset>\n            }\n            <VersionApp />\n        </div>\n    )\n}","/home/max/Documentos/microsys/src/components/ProgressBar/index.js",["145"],"import React, { useState, useEffect, useContext } from 'react';\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { AuthContext } from '../../contexts/auth';\n\nexport default function ProgressBar() {\n    const { loading } = useContext(AuthContext);\n\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setProgress((oldProgress) => {\n            if (oldProgress === 100) {\n                return 0;\n            }\n            const diff = Math.random() * 10;\n            return Math.min(oldProgress + diff, 100);\n            });\n        }, 3000);\n\n        return () => {\n            clearInterval(timer);\n        };\n    }, [loading]);\n\n  return (\n    <Box sx={{width: '100%'}}>\n      <LinearProgress />\n    </Box>\n  );\n}","/home/max/Documentos/microsys/src/components/VersionApp/index.js",[],"/home/max/Documentos/microsys/src/components/Header/index.js",["146"],"/home/max/Documentos/microsys/src/components/TableBactery/index.js",["147"],"import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../services/api';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { AuthContext } from '../../contexts/auth';\nimport './TableBactery.css';\n\nexport default function StickyHeadTable({ dataBactery, getBactery }) {\n  let history = useHistory();\n  const { token } = useContext(AuthContext);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [buttonUpdate, setButtonUpdate] = useState(true);\n  \n\n  const columns = [\n    { id: 'codigo', label: 'Código', minWidth: 130 },\n    { id: 'cor', label: 'Cor', minWidth: 130 },\n    { id: 'forma', label: 'Forma', minWidth: 130 },\n    { id: 'elevacao', label: 'Elevação', minWidth: 130 },\n    { id: 'borda', label: 'Borda', minWidth: 130 },\n    { id: 'superficie', label: 'Superfície', minWidth: 130 }\n  ];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const directionEdit = async (item, itemMorph, itemHost)=> {\n    \n    history.push({pathname: 'adicao-bacteriana/', \n    codigo: item.codigo,\n    identMolecular: item.identMolecular,\n    cor: item.cor,\n    forma: item.forma,\n    elevacao: item.elevacao,\n    borda: item.borda,\n    superficie: item.superficie, \n    consistencia: item.consistencia,\n    detalhes: item.detalhes,\n    pigmentos: item.pigmentos,\n    propriedades: item.propriedades,\n    meioIsolamento: item.meioIsolamento,\n    tempIncubacao: item.tempIncubacao,\n    descricaoIsolado: item.descricaoIsolado,\n    dataColeta: item.dataColeta,\n    dataReativacao: item.dataReativacao,\n    localColeta: item.localColeta,\n    morfologia: itemMorph[0].descricao,\n    hospedeiro: itemHost[0].descricao,\n    morfologiaId: itemMorph[0].id,\n    hospedeiroId: itemHost[0].id,\n    itemId: item.id,\n    buttonUpdate: buttonUpdate\n    });\n\n  }\n\n  async function getMorphological(item){\n    try{\n        let responseMorph = await api.get('/morfologias',{\n          headers:{\n            'Content-type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*'\n          }\n        })\n        const resultMorph = responseMorph.data;\n        const itemMorph = resultMorph.filter(i => {\n          return i.id === item.morfologiaId ;\n      })\n\n      const responseHost = await api.get('/hospedeiros',{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      })\n        const resultHost = responseHost.data;\n        const itemHost = resultHost.filter(i => {\n            return i.id === item.hospedeiroId;\n        });\n\n      directionEdit(item, itemMorph, itemHost);\n    }\n    catch(error){\n        console.log('erro na listagem:', error);\n    }\n    \n  }\n\n  const directionRemove = async (item) => {\n    const res = window.confirm('Tem certeza de que deseja remover este registro ?');\n      if(res === true){\n\n        try{\n          await api.delete(`/bacterias/${item.id}`,  {\n            data: {foo: 'bar'}\n          })\n          alert('Registro excluído com sucesso!');\n          getBactery();\n        }\n        catch(error){\n          console.log(error)\n          alert('Erro ao tentar excluir este registro.');\n        }\n        return\n      }\n  }\n\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {dataBactery\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                      <div className='areaActions'>\n                      <VisibilityIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <EditIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <DeleteForeverIcon id=\"icon\" onClick={()=> directionRemove(row)} />\n                      </div>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 25, 100]}\n        component=\"div\"\n        count={dataBactery.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as React from 'react';\n// import './table.css';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\n\n// export default function DataTable() {\n//   return (\n//     <div className='container'>\n//       <div className='areaFormulary2'>\n//             <div id='textUser'>\n//                 <span>Lista de microorganismos fúngicos:</span>\n//             </div>\n//             <div className='listHeader'>\n//                 <span id=\"idEmail\">Descrição</span>\n//                 <span id=\"idEmail\">Cor</span>\n//                 <span id=\"idEmail\">Propriedades</span>\n//                 <span id=\"idEmail\">Forma</span>\n//                 <span id=\"idEmail\">Tipo</span>\n//             </div>\n//             <div className='listUser'>\n//                 {\n//                 data.map(m => (\n//                     <div className='containerUser'>\n//                     {loading ?\n//                         <ProgressBar />\n//                         :\n//                         <>\n//                         <div className='listUsers'>\n//                             <span>{m.name}</span>\n//                         </div>\n//                         <div className='listUsers'>\n//                             <span>{m.email}</span>\n//                         </div>\n//                         </>\n//                     }\n//                     <div className='options'>\n//                         <EditIcon id=\"icon\"/>\n//                         <DeleteForeverIcon id=\"icon\"/>\n//                     </div>\n//                     </div>\n//                 ))\n//                 }\n//             </div>\n            \n//         </div>\n//     </div>\n//   );\n// }","/home/max/Documentos/microsys/src/components/TableFungic/index.js",["148"],"import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../services/api';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport './TableFungic.css';\nimport { AuthContext } from '../../contexts/auth';\n\nexport default function StickyHeadTable({ dataFungic, getFungic }) {\n  let history = useHistory();\n  const { token } = useContext(AuthContext);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [buttonUpdate, setButtonUpdate] = useState(true);\n  \n\n  const columns = [\n    { id: 'codigo', label: 'Código', minWidth: 130 },\n    { id: 'descricaoIsolado', label: 'Descrição', minWidth: 130 },\n    { id: 'cor', label: 'Cor', minWidth: 130 },\n    { id: 'propriedades', label: 'Propriedades', minWidth: 130 },\n    { id: 'forma', label: 'Forma', minWidth: 130 },\n    { id: 'textura', label: 'Textura', minWidth: 130 },\n    \n  ];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const directionEdit = async (item, itemMorph, itemHost)=> {\n    \n    history.push({pathname: 'adicao-fungica', \n    codigo: item.codigo,\n    identMolecular: item.identMolecular,\n    cor: item.cor,\n    corVerso: item.corVerso,\n    pigmento: item.pigmento,\n    textura: item.textura,\n    forma: item.forma,\n    borda: item.borda,\n    superficie: item.superficie, \n    elevacao: item.elevacao,\n    esporula: item.esporula,\n    tipoCresc: item.tipoCresc,\n    propriedades: item.propriedades,\n    meioIsolamento: item.meioIsolamento,\n    tempIncubacao: item.tempIncubacao,\n    descricaoIsolado: item.descricaoIsolado,\n    dataColeta: item.dataColeta,\n    dataReativacao: item.dataReativacao,\n    localColeta: item.localColeta,\n    morfologia: itemMorph[0].descricao,\n    hospedeiro: itemHost[0].descricao,\n    morfologiaId: itemMorph[0].id,\n    hospedeiroId: itemHost[0].id,\n    urlImagem: item.urlImagem,\n    urlImagemVerso: item.urlImagemVerso,\n    urlImagemMicro: item.urlImagemMicro,\n    itemId: item.id,\n    buttonUpdate: buttonUpdate\n    });\n\n  }\n\n  async function getMorphological(item){\n    try{\n        let responseMorph = await api.get('/morfologias',{\n          headers:{\n            'Content-type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*'\n          }\n        })\n        const resultMorph = responseMorph.data;\n        const itemMorph = resultMorph.filter(i => {\n          return i.id === item.morfologiaId ;\n        })\n\n      const responseHost = await api.get('/hospedeiros',{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      })\n        const resultHost = responseHost.data;\n        const itemHost = resultHost.filter(i => {\n            return i.id === item.hospedeiroId;\n        });\n\n      directionEdit(item, itemMorph, itemHost);\n    }\n    catch(error){\n        console.log('erro na listagem:', error);\n    }\n    \n  }\n\n  const directionRemove = async (item) => {\n    const res = window.confirm('Sabia que além de remover, você pode desativar ou ativar um registro, deseja mesmo remover este usuário ?');\n      if(res === true){\n\n        try{\n          await api.delete(`/fungos/${item.id}`,  {\n            data: {foo: 'bar'}\n          })\n          alert('Registro excluído com sucesso!');\n          getFungic();\n        }\n        catch(error){\n          console.log(error)\n          alert('Erro ao tentar excluir este registro.');\n        }\n        return\n      }\n  }\n\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {dataFungic\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                      <div className='areaActions'>\n                        <VisibilityIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <EditIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <DeleteForeverIcon id=\"icon\" onClick={()=> directionRemove(row)} />\n                      </div>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 25, 100]}\n        component=\"div\"\n        count={dataFungic.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as React from 'react';\n// import './table.css';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\n\n// export default function DataTable() {\n//   return (\n//     <div className='container'>\n//       <div className='areaFormulary2'>\n//             <div id='textUser'>\n//                 <span>Lista de microorganismos fúngicos:</span>\n//             </div>\n//             <div className='listHeader'>\n//                 <span id=\"idEmail\">Descrição</span>\n//                 <span id=\"idEmail\">Cor</span>\n//                 <span id=\"idEmail\">Propriedades</span>\n//                 <span id=\"idEmail\">Forma</span>\n//                 <span id=\"idEmail\">Tipo</span>\n//             </div>\n//             <div className='listUser'>\n//                 {\n//                 data.map(m => (\n//                     <div className='containerUser'>\n//                     {loading ?\n//                         <ProgressBar />\n//                         :\n//                         <>\n//                         <div className='listUsers'>\n//                             <span>{m.name}</span>\n//                         </div>\n//                         <div className='listUsers'>\n//                             <span>{m.email}</span>\n//                         </div>\n//                         </>\n//                     }\n//                     <div className='options'>\n//                         <EditIcon id=\"icon\"/>\n//                         <DeleteForeverIcon id=\"icon\"/>\n//                     </div>\n//                     </div>\n//                 ))\n//                 }\n//             </div>\n            \n//         </div>\n//     </div>\n//   );\n// }","/home/max/Documentos/microsys/src/components/TableUser/index.js",[],"/home/max/Documentos/microsys/src/components/Search/index.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":10,"column":12,"nodeType":"155","messageId":"156","endLine":10,"endColumn":24},{"ruleId":"153","severity":1,"message":"157","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":15,"column":10,"nodeType":"155","messageId":"156","endLine":15,"endColumn":22},{"ruleId":"153","severity":1,"message":"158","line":11,"column":11,"nodeType":"155","messageId":"156","endLine":11,"endColumn":15},{"ruleId":"153","severity":1,"message":"159","line":13,"column":17,"nodeType":"155","messageId":"156","endLine":13,"endColumn":25},{"ruleId":"153","severity":1,"message":"160","line":14,"column":23,"nodeType":"155","messageId":"156","endLine":14,"endColumn":37},{"ruleId":"153","severity":1,"message":"161","line":10,"column":8,"nodeType":"155","messageId":"156","endLine":10,"endColumn":18},{"ruleId":"153","severity":1,"message":"159","line":15,"column":17,"nodeType":"155","messageId":"156","endLine":15,"endColumn":25},{"ruleId":"153","severity":1,"message":"162","line":16,"column":19,"nodeType":"155","messageId":"156","endLine":16,"endColumn":29},{"ruleId":"153","severity":1,"message":"163","line":17,"column":21,"nodeType":"155","messageId":"156","endLine":17,"endColumn":33},{"ruleId":"164","severity":1,"message":"165","line":42,"column":6,"nodeType":"166","endLine":42,"endColumn":8,"suggestions":"167"},{"ruleId":"153","severity":1,"message":"161","line":10,"column":8,"nodeType":"155","messageId":"156","endLine":10,"endColumn":18},{"ruleId":"153","severity":1,"message":"159","line":15,"column":17,"nodeType":"155","messageId":"156","endLine":15,"endColumn":25},{"ruleId":"153","severity":1,"message":"162","line":16,"column":19,"nodeType":"155","messageId":"156","endLine":16,"endColumn":29},{"ruleId":"153","severity":1,"message":"163","line":17,"column":21,"nodeType":"155","messageId":"156","endLine":17,"endColumn":33},{"ruleId":"164","severity":1,"message":"168","line":43,"column":6,"nodeType":"166","endLine":43,"endColumn":8,"suggestions":"169"},{"ruleId":"153","severity":1,"message":"159","line":16,"column":17,"nodeType":"155","messageId":"156","endLine":16,"endColumn":25},{"ruleId":"153","severity":1,"message":"162","line":17,"column":19,"nodeType":"155","messageId":"156","endLine":17,"endColumn":29},{"ruleId":"153","severity":1,"message":"170","line":18,"column":10,"nodeType":"155","messageId":"156","endLine":18,"endColumn":14},{"ruleId":"153","severity":1,"message":"163","line":26,"column":21,"nodeType":"155","messageId":"156","endLine":26,"endColumn":33},{"ruleId":"164","severity":1,"message":"171","line":174,"column":6,"nodeType":"166","endLine":174,"endColumn":8,"suggestions":"172"},{"ruleId":"153","severity":1,"message":"159","line":20,"column":19,"nodeType":"155","messageId":"156","endLine":20,"endColumn":27},{"ruleId":"153","severity":1,"message":"162","line":21,"column":21,"nodeType":"155","messageId":"156","endLine":21,"endColumn":31},{"ruleId":"153","severity":1,"message":"163","line":22,"column":23,"nodeType":"155","messageId":"156","endLine":22,"endColumn":35},{"ruleId":"153","severity":1,"message":"173","line":58,"column":12,"nodeType":"155","messageId":"156","endLine":58,"endColumn":21},{"ruleId":"153","severity":1,"message":"174","line":58,"column":23,"nodeType":"155","messageId":"156","endLine":58,"endColumn":35},{"ruleId":"164","severity":1,"message":"175","line":388,"column":8,"nodeType":"166","endLine":388,"endColumn":23,"suggestions":"176"},{"ruleId":"164","severity":1,"message":"177","line":397,"column":8,"nodeType":"166","endLine":397,"endColumn":14,"suggestions":"178"},{"ruleId":"164","severity":1,"message":"179","line":401,"column":8,"nodeType":"166","endLine":401,"endColumn":10,"suggestions":"180"},{"ruleId":"164","severity":1,"message":"181","line":405,"column":8,"nodeType":"166","endLine":405,"endColumn":10,"suggestions":"182"},{"ruleId":"164","severity":1,"message":"183","line":436,"column":8,"nodeType":"166","endLine":436,"endColumn":10,"suggestions":"184"},{"ruleId":"153","severity":1,"message":"159","line":20,"column":19,"nodeType":"155","messageId":"156","endLine":20,"endColumn":27},{"ruleId":"153","severity":1,"message":"162","line":21,"column":21,"nodeType":"155","messageId":"156","endLine":21,"endColumn":31},{"ruleId":"153","severity":1,"message":"163","line":22,"column":23,"nodeType":"155","messageId":"156","endLine":22,"endColumn":35},{"ruleId":"164","severity":1,"message":"175","line":389,"column":8,"nodeType":"166","endLine":389,"endColumn":23,"suggestions":"185"},{"ruleId":"164","severity":1,"message":"177","line":398,"column":8,"nodeType":"166","endLine":398,"endColumn":14,"suggestions":"186"},{"ruleId":"164","severity":1,"message":"179","line":402,"column":8,"nodeType":"166","endLine":402,"endColumn":10,"suggestions":"187"},{"ruleId":"164","severity":1,"message":"181","line":406,"column":8,"nodeType":"166","endLine":406,"endColumn":10,"suggestions":"188"},{"ruleId":"164","severity":1,"message":"189","line":493,"column":8,"nodeType":"166","endLine":493,"endColumn":10,"suggestions":"190"},{"ruleId":"164","severity":1,"message":"191","line":134,"column":8,"nodeType":"166","endLine":134,"endColumn":10,"suggestions":"192"},{"ruleId":"153","severity":1,"message":"193","line":9,"column":12,"nodeType":"155","messageId":"156","endLine":9,"endColumn":20},{"ruleId":"153","severity":1,"message":"194","line":1,"column":39,"nodeType":"155","messageId":"156","endLine":1,"endColumn":48},{"ruleId":"153","severity":1,"message":"195","line":23,"column":24,"nodeType":"155","messageId":"156","endLine":23,"endColumn":39},{"ruleId":"153","severity":1,"message":"195","line":23,"column":24,"nodeType":"155","messageId":"156","endLine":23,"endColumn":39},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'user' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setBackVisible' is assigned a value but never used.","'VersionApp' is defined but never used.","'setVisible' is assigned a value but never used.","'setOffSearch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBactery'. Either include it or remove the dependency array.","ArrayExpression",["198"],"React Hook useEffect has a missing dependency: 'getFungic'. Either include it or remove the dependency array.",["199"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'listUsers'. Either include it or remove the dependency array.",["200"],"'idBactery' is assigned a value but never used.","'setIdBactery' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataMorphological'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setIdMorph' needs the current value of 'dataMorphological'.",["201"],"React Hook useEffect has a missing dependency: 'dataHost'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setIdHost' needs the current value of 'dataHost'.",["202"],"React Hook useEffect has a missing dependency: 'getMorphological'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has a missing dependency: 'getHost'. Either include it or remove the dependency array.",["204"],"React Hook useEffect has a missing dependency: 'props.location.urlImagem'. Either include it or remove the dependency array.",["205"],["206"],["207"],["208"],["209"],"React Hook useEffect has a missing dependency: 'getImages'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'getInfoProfile'. Either include it or remove the dependency array.",["211"],"'progress' is assigned a value but never used.","'useEffect' is defined but never used.","'setButtonUpdate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"218","fix":"228"},{"desc":"220","fix":"229"},{"desc":"222","fix":"230"},{"desc":"224","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [getBactery]",{"range":"236","text":"237"},"Update the dependencies array to be: [getFungic]",{"range":"238","text":"239"},"Update the dependencies array to be: [listUsers]",{"range":"240","text":"241"},"Update the dependencies array to be: [dataMorphological, morphological]",{"range":"242","text":"243"},"Update the dependencies array to be: [dataHost, host]",{"range":"244","text":"245"},"Update the dependencies array to be: [getMorphological]",{"range":"246","text":"247"},"Update the dependencies array to be: [getHost]",{"range":"248","text":"249"},"Update the dependencies array to be: [props.location.urlImagem]",{"range":"250","text":"251"},{"range":"252","text":"243"},{"range":"253","text":"245"},{"range":"254","text":"247"},{"range":"255","text":"249"},"Update the dependencies array to be: [getImages]",{"range":"256","text":"257"},"Update the dependencies array to be: [getInfoProfile]",{"range":"258","text":"259"},[1330,1332],"[getBactery]",[1313,1315],"[getFungic]",[4320,4322],"[listUsers]",[13360,13375],"[dataMorphological, morphological]",[13589,13595],"[dataHost, host]",[13655,13657],"[getMorphological]",[13708,13710],"[getHost]",[14885,14887],"[props.location.urlImagem]",[13385,13400],[13614,13620],[13680,13682],[13733,13735],[16921,16923],"[getImages]",[4362,4364],"[getInfoProfile]"]