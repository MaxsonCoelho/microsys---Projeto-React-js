{"ast":null,"code":"var _jsxFileName = \"/home/max/Documentos/microsys/src/components/TableBactery/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../services/api';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { AuthContext } from '../../contexts/auth';\nimport './TableBactery.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StickyHeadTable({\n  dataBactery,\n  getBactery\n}) {\n  _s();\n\n  let history = useHistory();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [buttonUpdate, setButtonUpdate] = useState(true);\n  const columns = [{\n    id: 'codigo',\n    label: 'Código',\n    minWidth: 130\n  }, {\n    id: 'cor',\n    label: 'Cor',\n    minWidth: 130\n  }, {\n    id: 'forma',\n    label: 'Forma',\n    minWidth: 130\n  }, {\n    id: 'elevacao',\n    label: 'Elevação',\n    minWidth: 130\n  }, {\n    id: 'borda',\n    label: 'Borda',\n    minWidth: 130\n  }, {\n    id: 'superficie',\n    label: 'Superfície',\n    minWidth: 130\n  }];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const directionEdit = async (item, itemMorph, itemHost) => {\n    history.push({\n      pathname: 'adicao-bacteriana/',\n      codigo: item.codigo,\n      identMolecular: item.identMolecular,\n      cor: item.cor,\n      forma: item.forma,\n      elevacao: item.elevacao,\n      borda: item.borda,\n      superficie: item.superficie,\n      consistencia: item.consistencia,\n      detalhes: item.detalhes,\n      pigmentos: item.pigmentos,\n      propriedades: item.propriedades,\n      meioIsolamento: item.meioIsolamento,\n      tempIncubacao: item.tempIncubacao,\n      descricaoIsolado: item.descricaoIsolado,\n      dataColeta: item.dataColeta,\n      dataReativacao: item.dataReativacao,\n      localColeta: item.localColeta,\n      morfologia: itemMorph[0].descricao,\n      hospedeiro: itemHost[0].descricao,\n      morfologiaId: itemMorph[0].id,\n      hospedeiroId: itemHost[0].id,\n      itemId: item.id,\n      buttonUpdate: buttonUpdate\n    });\n  };\n\n  async function getMorphological(item) {\n    try {\n      let responseMorph = await api.get('/morfologias', {\n        headers: {\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n      const resultMorph = responseMorph.data;\n      const itemMorph = resultMorph.filter(i => {\n        return i.id === item.morfologiaId;\n      });\n      const responseHost = await api.get('/hospedeiros', {\n        headers: {\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      });\n      const resultHost = responseHost.data;\n      const itemHost = resultHost.filter(i => {\n        return i.id === item.hospedeiroId;\n      });\n      directionEdit(item, itemMorph, itemHost);\n    } catch (error) {\n      console.log('erro na listagem:', error);\n    }\n  }\n\n  const directionRemove = async item => {\n    const res = window.confirm('Tem certeza de que deseja remover este registro ?');\n\n    if (res === true) {\n      try {\n        await api.delete(`/bacterias/${item.id}`, {\n          data: {\n            foo: 'bar'\n          }\n        });\n        alert('Registro excluído com sucesso!');\n        getBactery();\n      } catch (error) {\n        console.log(error);\n        alert('Erro ao tentar excluir este registro.');\n      }\n\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      width: '100%',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: dataBactery.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: [columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 25\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"areaActions\",\n                children: [/*#__PURE__*/_jsxDEV(VisibilityIcon, {\n                  id: \"icon\",\n                  onClick: () => getMorphological(row)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(EditIcon, {\n                  id: \"icon\",\n                  onClick: () => getMorphological(row)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n                  id: \"icon\",\n                  onClick: () => directionRemove(row)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 23\n              }, this)]\n            }, row.code, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 25, 100],\n      component: \"div\",\n      count: dataBactery.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n} // import * as React from 'react';\n// import './table.css';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n// export default function DataTable() {\n//   return (\n//     <div className='container'>\n//       <div className='areaFormulary2'>\n//             <div id='textUser'>\n//                 <span>Lista de microorganismos fúngicos:</span>\n//             </div>\n//             <div className='listHeader'>\n//                 <span id=\"idEmail\">Descrição</span>\n//                 <span id=\"idEmail\">Cor</span>\n//                 <span id=\"idEmail\">Propriedades</span>\n//                 <span id=\"idEmail\">Forma</span>\n//                 <span id=\"idEmail\">Tipo</span>\n//             </div>\n//             <div className='listUser'>\n//                 {\n//                 data.map(m => (\n//                     <div className='containerUser'>\n//                     {loading ?\n//                         <ProgressBar />\n//                         :\n//                         <>\n//                         <div className='listUsers'>\n//                             <span>{m.name}</span>\n//                         </div>\n//                         <div className='listUsers'>\n//                             <span>{m.email}</span>\n//                         </div>\n//                         </>\n//                     }\n//                     <div className='options'>\n//                         <EditIcon id=\"icon\"/>\n//                         <DeleteForeverIcon id=\"icon\"/>\n//                     </div>\n//                     </div>\n//                 ))\n//                 }\n//             </div>\n//         </div>\n//     </div>\n//   );\n// }\n\n_s(StickyHeadTable, \"oEsQvqUvLtyLohkqTVKWXIm1rF4=\", false, function () {\n  return [useHistory];\n});\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/home/max/Documentos/microsys/src/components/TableBactery/index.js"],"names":["React","useState","useContext","useHistory","api","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","EditIcon","DeleteForeverIcon","VisibilityIcon","AuthContext","StickyHeadTable","dataBactery","getBactery","history","token","page","setPage","rowsPerPage","setRowsPerPage","buttonUpdate","setButtonUpdate","columns","id","label","minWidth","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","directionEdit","item","itemMorph","itemHost","push","pathname","codigo","identMolecular","cor","forma","elevacao","borda","superficie","consistencia","detalhes","pigmentos","propriedades","meioIsolamento","tempIncubacao","descricaoIsolado","dataColeta","dataReativacao","localColeta","morfologia","descricao","hospedeiro","morfologiaId","hospedeiroId","itemId","getMorphological","responseMorph","get","headers","resultMorph","data","filter","i","responseHost","resultHost","error","console","log","directionRemove","res","window","confirm","delete","foo","alert","width","overflow","maxHeight","map","column","align","slice","row","format","code","length"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../services/api';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { AuthContext } from '../../contexts/auth';\nimport './TableBactery.css';\n\nexport default function StickyHeadTable({ dataBactery, getBactery }) {\n  let history = useHistory();\n  const { token } = useContext(AuthContext);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [buttonUpdate, setButtonUpdate] = useState(true);\n  \n\n  const columns = [\n    { id: 'codigo', label: 'Código', minWidth: 130 },\n    { id: 'cor', label: 'Cor', minWidth: 130 },\n    { id: 'forma', label: 'Forma', minWidth: 130 },\n    { id: 'elevacao', label: 'Elevação', minWidth: 130 },\n    { id: 'borda', label: 'Borda', minWidth: 130 },\n    { id: 'superficie', label: 'Superfície', minWidth: 130 }\n  ];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const directionEdit = async (item, itemMorph, itemHost)=> {\n    \n    history.push({pathname: 'adicao-bacteriana/', \n    codigo: item.codigo,\n    identMolecular: item.identMolecular,\n    cor: item.cor,\n    forma: item.forma,\n    elevacao: item.elevacao,\n    borda: item.borda,\n    superficie: item.superficie, \n    consistencia: item.consistencia,\n    detalhes: item.detalhes,\n    pigmentos: item.pigmentos,\n    propriedades: item.propriedades,\n    meioIsolamento: item.meioIsolamento,\n    tempIncubacao: item.tempIncubacao,\n    descricaoIsolado: item.descricaoIsolado,\n    dataColeta: item.dataColeta,\n    dataReativacao: item.dataReativacao,\n    localColeta: item.localColeta,\n    morfologia: itemMorph[0].descricao,\n    hospedeiro: itemHost[0].descricao,\n    morfologiaId: itemMorph[0].id,\n    hospedeiroId: itemHost[0].id,\n    itemId: item.id,\n    buttonUpdate: buttonUpdate\n    });\n\n  }\n\n  async function getMorphological(item){\n    try{\n        let responseMorph = await api.get('/morfologias',{\n          headers:{\n            'Content-type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Accept': '*/*'\n          }\n        })\n        const resultMorph = responseMorph.data;\n        const itemMorph = resultMorph.filter(i => {\n          return i.id === item.morfologiaId ;\n      })\n\n      const responseHost = await api.get('/hospedeiros',{\n        headers:{\n          'Content-type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Accept': '*/*'\n        }\n      })\n        const resultHost = responseHost.data;\n        const itemHost = resultHost.filter(i => {\n            return i.id === item.hospedeiroId;\n        });\n\n      directionEdit(item, itemMorph, itemHost);\n    }\n    catch(error){\n        console.log('erro na listagem:', error);\n    }\n    \n  }\n\n  const directionRemove = async (item) => {\n    const res = window.confirm('Tem certeza de que deseja remover este registro ?');\n      if(res === true){\n\n        try{\n          await api.delete(`/bacterias/${item.id}`,  {\n            data: {foo: 'bar'}\n          })\n          alert('Registro excluído com sucesso!');\n          getBactery();\n        }\n        catch(error){\n          console.log(error)\n          alert('Erro ao tentar excluir este registro.');\n        }\n        return\n      }\n  }\n\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {dataBactery\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                      <div className='areaActions'>\n                      <VisibilityIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <EditIcon id=\"icon\" onClick={()=> getMorphological(row)} />\n                        <DeleteForeverIcon id=\"icon\" onClick={()=> directionRemove(row)} />\n                      </div>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 25, 100]}\n        component=\"div\"\n        count={dataBactery.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as React from 'react';\n// import './table.css';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\n\n// export default function DataTable() {\n//   return (\n//     <div className='container'>\n//       <div className='areaFormulary2'>\n//             <div id='textUser'>\n//                 <span>Lista de microorganismos fúngicos:</span>\n//             </div>\n//             <div className='listHeader'>\n//                 <span id=\"idEmail\">Descrição</span>\n//                 <span id=\"idEmail\">Cor</span>\n//                 <span id=\"idEmail\">Propriedades</span>\n//                 <span id=\"idEmail\">Forma</span>\n//                 <span id=\"idEmail\">Tipo</span>\n//             </div>\n//             <div className='listUser'>\n//                 {\n//                 data.map(m => (\n//                     <div className='containerUser'>\n//                     {loading ?\n//                         <ProgressBar />\n//                         :\n//                         <>\n//                         <div className='listUsers'>\n//                             <span>{m.name}</span>\n//                         </div>\n//                         <div className='listUsers'>\n//                             <span>{m.email}</span>\n//                         </div>\n//                         </>\n//                     }\n//                     <div className='options'>\n//                         <EditIcon id=\"icon\"/>\n//                         <DeleteForeverIcon id=\"icon\"/>\n//                     </div>\n//                     </div>\n//                 ))\n//                 }\n//             </div>\n            \n//         </div>\n//     </div>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}